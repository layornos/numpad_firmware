   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** 
  30:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:../../tmk_core/common/action.c **** #include "debug.h"
  32:../../tmk_core/common/action.c **** #else
  33:../../tmk_core/common/action.c **** #include "nodebug.h"
  34:../../tmk_core/common/action.c **** #endif
  35:../../tmk_core/common/action.c **** 
  36:../../tmk_core/common/action.c **** 
  37:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:../../tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../tmk_core/common/action.c ****     }
  43:../../tmk_core/common/action.c **** 
  44:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../tmk_core/common/action.c **** 
  46:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../tmk_core/common/action.c **** #else
  49:../../tmk_core/common/action.c ****     process_record(&record);
  50:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../tmk_core/common/action.c ****     }
  53:../../tmk_core/common/action.c **** #endif
  54:../../tmk_core/common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.process_record_quantum,"ax",@progbits
  91               		.weak	process_record_quantum
  93               	process_record_quantum:
  94               	.LFB105:
  55:../../tmk_core/common/action.c **** 
  56:../../tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  57:../../tmk_core/common/action.c **** bool disable_action_cache = false;
  58:../../tmk_core/common/action.c **** 
  59:../../tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  60:../../tmk_core/common/action.c **** {
  61:../../tmk_core/common/action.c ****     disable_action_cache = true;
  62:../../tmk_core/common/action.c ****     process_record(record);
  63:../../tmk_core/common/action.c ****     disable_action_cache = false;
  64:../../tmk_core/common/action.c **** }
  65:../../tmk_core/common/action.c **** #else
  66:../../tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  67:../../tmk_core/common/action.c **** {
  68:../../tmk_core/common/action.c ****     process_record(record);
  69:../../tmk_core/common/action.c **** }
  70:../../tmk_core/common/action.c **** #endif
  71:../../tmk_core/common/action.c **** 
  72:../../tmk_core/common/action.c **** __attribute__ ((weak))
  73:../../tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  95               		.loc 1 73 0
  96               		.cfi_startproc
  97               	.LVL4:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  74:../../tmk_core/common/action.c ****     return true;
  75:../../tmk_core/common/action.c **** }
 102               		.loc 1 75 0
 103 0000 81E0      		ldi r24,lo8(1)
 104               	.LVL5:
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE105:
 109               		.section	.text.register_code,"ax",@progbits
 110               	.global	register_code
 112               	register_code:
 113               	.LFB108:
  76:../../tmk_core/common/action.c **** 
  77:../../tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
  78:../../tmk_core/common/action.c **** {
  79:../../tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
  80:../../tmk_core/common/action.c **** 
  81:../../tmk_core/common/action.c ****     if(!process_record_quantum(record))
  82:../../tmk_core/common/action.c ****         return;
  83:../../tmk_core/common/action.c **** 
  84:../../tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
  85:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  86:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  87:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  88:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  89:../../tmk_core/common/action.c **** #endif
  90:../../tmk_core/common/action.c ****     dprintln();
  91:../../tmk_core/common/action.c **** 
  92:../../tmk_core/common/action.c ****     process_action(record, action);
  93:../../tmk_core/common/action.c **** }
  94:../../tmk_core/common/action.c **** 
  95:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
  96:../../tmk_core/common/action.c **** {
  97:../../tmk_core/common/action.c ****     bool do_release_oneshot = false;
  98:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  99:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 100:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 101:../../tmk_core/common/action.c **** #endif
 102:../../tmk_core/common/action.c **** 
 103:../../tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 104:../../tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 105:../../tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 106:../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 107:../../tmk_core/common/action.c ****     }
 108:../../tmk_core/common/action.c **** #endif
 109:../../tmk_core/common/action.c **** 
 110:../../tmk_core/common/action.c ****     if (event.pressed) {
 111:../../tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 112:../../tmk_core/common/action.c ****         clear_weak_mods();
 113:../../tmk_core/common/action.c ****     }
 114:../../tmk_core/common/action.c **** 
 115:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 116:../../tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 117:../../tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 118:../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 119:../../tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 120:../../tmk_core/common/action.c ****     }
 121:../../tmk_core/common/action.c **** #endif
 122:../../tmk_core/common/action.c **** 
 123:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 124:../../tmk_core/common/action.c ****         /* Key and Mods */
 125:../../tmk_core/common/action.c ****         case ACT_LMODS:
 126:../../tmk_core/common/action.c ****         case ACT_RMODS:
 127:../../tmk_core/common/action.c ****             {
 128:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 129:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 130:../../tmk_core/common/action.c ****                 if (event.pressed) {
 131:../../tmk_core/common/action.c ****                     if (mods) {
 132:../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 133:../../tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 134:../../tmk_core/common/action.c ****                             // this also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 135:../../tmk_core/common/action.c ****                             add_mods(mods);
 136:../../tmk_core/common/action.c ****                         } else {
 137:../../tmk_core/common/action.c ****                             add_weak_mods(mods);
 138:../../tmk_core/common/action.c ****                         }
 139:../../tmk_core/common/action.c ****                         send_keyboard_report();
 140:../../tmk_core/common/action.c ****                     }
 141:../../tmk_core/common/action.c ****                     register_code(action.key.code);
 142:../../tmk_core/common/action.c ****                 } else {
 143:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 144:../../tmk_core/common/action.c ****                     if (mods) {
 145:../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 146:../../tmk_core/common/action.c ****                             del_mods(mods);
 147:../../tmk_core/common/action.c ****                         } else {
 148:../../tmk_core/common/action.c ****                             del_weak_mods(mods);
 149:../../tmk_core/common/action.c ****                         }
 150:../../tmk_core/common/action.c ****                         send_keyboard_report();
 151:../../tmk_core/common/action.c ****                     }
 152:../../tmk_core/common/action.c ****                 }
 153:../../tmk_core/common/action.c ****             }
 154:../../tmk_core/common/action.c ****             break;
 155:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 156:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 157:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 158:../../tmk_core/common/action.c ****             {
 159:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 160:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 161:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 162:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 163:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 164:../../tmk_core/common/action.c ****                         // Oneshot modifier
 165:../../tmk_core/common/action.c ****                         if (event.pressed) {
 166:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 167:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 168:../../tmk_core/common/action.c ****                                 register_mods(mods);
 169:../../tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 170:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 171:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 172:../../tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 173:../../tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 174:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 175:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 176:../../tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 177:../../tmk_core/common/action.c ****                                 register_mods(mods);
 178:../../tmk_core/common/action.c ****                     #endif
 179:../../tmk_core/common/action.c ****                             } else {
 180:../../tmk_core/common/action.c ****                                 register_mods(mods);
 181:../../tmk_core/common/action.c ****                             }
 182:../../tmk_core/common/action.c ****                         } else {
 183:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 184:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 185:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 186:../../tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 187:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 188:../../tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 189:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 190:../../tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 191:../../tmk_core/common/action.c ****                                     clear_oneshot_mods();
 192:../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 193:../../tmk_core/common/action.c ****                                 }
 194:../../tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 195:../../tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 196:../../tmk_core/common/action.c ****                     #endif
 197:../../tmk_core/common/action.c ****                             } else {
 198:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 199:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 200:../../tmk_core/common/action.c ****                             }
 201:../../tmk_core/common/action.c ****                         }
 202:../../tmk_core/common/action.c ****                         break;
 203:../../tmk_core/common/action.c ****     #endif
 204:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 205:../../tmk_core/common/action.c ****                         if (event.pressed) {
 206:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 207:../../tmk_core/common/action.c ****                                 register_mods(mods);
 208:../../tmk_core/common/action.c ****                             }
 209:../../tmk_core/common/action.c ****                         } else {
 210:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 211:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 212:../../tmk_core/common/action.c ****                             }
 213:../../tmk_core/common/action.c ****                         }
 214:../../tmk_core/common/action.c ****                         break;
 215:../../tmk_core/common/action.c ****                     default:
 216:../../tmk_core/common/action.c ****                         if (event.pressed) {
 217:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 218:../../tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 219:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 220:../../tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 221:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 222:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 223:../../tmk_core/common/action.c ****                                     register_mods(mods);
 224:../../tmk_core/common/action.c ****                                 } else
 225:../../tmk_core/common/action.c **** #endif
 226:../../tmk_core/common/action.c ****                                 {
 227:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 228:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 229:../../tmk_core/common/action.c ****                                 }
 230:../../tmk_core/common/action.c ****                             } else {
 231:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 232:../../tmk_core/common/action.c ****                                 register_mods(mods);
 233:../../tmk_core/common/action.c ****                             }
 234:../../tmk_core/common/action.c ****                         } else {
 235:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 236:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 237:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 238:../../tmk_core/common/action.c ****                             } else {
 239:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 240:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 241:../../tmk_core/common/action.c ****                             }
 242:../../tmk_core/common/action.c ****                         }
 243:../../tmk_core/common/action.c ****                         break;
 244:../../tmk_core/common/action.c ****                 }
 245:../../tmk_core/common/action.c ****             }
 246:../../tmk_core/common/action.c ****             break;
 247:../../tmk_core/common/action.c **** #endif
 248:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 249:../../tmk_core/common/action.c ****         /* other HID usage */
 250:../../tmk_core/common/action.c ****         case ACT_USAGE:
 251:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 252:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 253:../../tmk_core/common/action.c ****                     if (event.pressed) {
 254:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 255:../../tmk_core/common/action.c ****                     } else {
 256:../../tmk_core/common/action.c ****                         host_system_send(0);
 257:../../tmk_core/common/action.c ****                     }
 258:../../tmk_core/common/action.c ****                     break;
 259:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 260:../../tmk_core/common/action.c ****                     if (event.pressed) {
 261:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 262:../../tmk_core/common/action.c ****                     } else {
 263:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 264:../../tmk_core/common/action.c ****                     }
 265:../../tmk_core/common/action.c ****                     break;
 266:../../tmk_core/common/action.c ****             }
 267:../../tmk_core/common/action.c ****             break;
 268:../../tmk_core/common/action.c **** #endif
 269:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 270:../../tmk_core/common/action.c ****         /* Mouse key */
 271:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 272:../../tmk_core/common/action.c ****             if (event.pressed) {
 273:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 274:../../tmk_core/common/action.c ****                 mousekey_send();
 275:../../tmk_core/common/action.c ****             } else {
 276:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 277:../../tmk_core/common/action.c ****                 mousekey_send();
 278:../../tmk_core/common/action.c ****             }
 279:../../tmk_core/common/action.c ****             break;
 280:../../tmk_core/common/action.c **** #endif
 281:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 282:../../tmk_core/common/action.c ****         case ACT_LAYER:
 283:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 284:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 285:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 286:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 287:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 288:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 289:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 290:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 291:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 292:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 293:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 294:../../tmk_core/common/action.c ****                     }
 295:../../tmk_core/common/action.c ****                 }
 296:../../tmk_core/common/action.c ****             } else {
 297:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 298:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 299:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 300:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 301:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 302:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 303:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 304:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 305:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 306:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 307:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 308:../../tmk_core/common/action.c ****                     }
 309:../../tmk_core/common/action.c ****                 }
 310:../../tmk_core/common/action.c ****             }
 311:../../tmk_core/common/action.c ****             break;
 312:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 313:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 314:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 315:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 316:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 317:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 318:../../tmk_core/common/action.c ****                     if (event.pressed) {
 319:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 320:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 321:../../tmk_core/common/action.c ****                     } else {
 322:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 323:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 324:../../tmk_core/common/action.c ****                     }
 325:../../tmk_core/common/action.c ****                     break;
 326:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 327:../../tmk_core/common/action.c ****                     /* tap toggle */
 328:../../tmk_core/common/action.c ****                     if (event.pressed) {
 329:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 330:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 331:../../tmk_core/common/action.c ****                         }
 332:../../tmk_core/common/action.c ****                     } else {
 333:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 334:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 335:../../tmk_core/common/action.c ****                         }
 336:../../tmk_core/common/action.c ****                     }
 337:../../tmk_core/common/action.c ****                     break;
 338:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 339:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 340:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 341:../../tmk_core/common/action.c ****                     break;
 342:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 343:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 344:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 345:../../tmk_core/common/action.c ****                     break;
 346:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 347:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 348:../../tmk_core/common/action.c ****                                     layer_clear();
 349:../../tmk_core/common/action.c ****                     break;
 350:../../tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 351:../../tmk_core/common/action.c ****                 case OP_ONESHOT:
 352:../../tmk_core/common/action.c ****                     // Oneshot modifier
 353:../../tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 354:../../tmk_core/common/action.c ****                     do_release_oneshot = false;
 355:../../tmk_core/common/action.c ****                     if (event.pressed) {
 356:../../tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 357:../../tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 358:../../tmk_core/common/action.c ****                             reset_oneshot_layer();
 359:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 360:../../tmk_core/common/action.c ****                             break;
 361:../../tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 362:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 363:../../tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 364:../../tmk_core/common/action.c ****                         }
 365:../../tmk_core/common/action.c ****                     } else {
 366:../../tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 367:../../tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 368:../../tmk_core/common/action.c ****                             reset_oneshot_layer();
 369:../../tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 370:../../tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 371:../../tmk_core/common/action.c ****                         } else {
 372:../../tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 373:../../tmk_core/common/action.c ****                         }
 374:../../tmk_core/common/action.c ****                     }
 375:../../tmk_core/common/action.c ****                 #else
 376:../../tmk_core/common/action.c ****                     if (event.pressed) {
 377:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 378:../../tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 379:../../tmk_core/common/action.c ****                     } else {
 380:../../tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 381:../../tmk_core/common/action.c ****                         if (tap_count > 1) {
 382:../../tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 383:../../tmk_core/common/action.c ****                         }
 384:../../tmk_core/common/action.c ****                     }
 385:../../tmk_core/common/action.c ****                 #endif
 386:../../tmk_core/common/action.c ****                     break;
 387:../../tmk_core/common/action.c ****             #endif
 388:../../tmk_core/common/action.c ****                 default:
 389:../../tmk_core/common/action.c ****                     /* tap key */
 390:../../tmk_core/common/action.c ****                     if (event.pressed) {
 391:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 392:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 393:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 394:../../tmk_core/common/action.c ****                         } else {
 395:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 396:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 397:../../tmk_core/common/action.c ****                         }
 398:../../tmk_core/common/action.c ****                     } else {
 399:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 400:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 401:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 402:../../tmk_core/common/action.c ****                         } else {
 403:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 404:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 405:../../tmk_core/common/action.c ****                         }
 406:../../tmk_core/common/action.c ****                     }
 407:../../tmk_core/common/action.c ****                     break;
 408:../../tmk_core/common/action.c ****             }
 409:../../tmk_core/common/action.c ****             break;
 410:../../tmk_core/common/action.c ****     #endif
 411:../../tmk_core/common/action.c **** #endif
 412:../../tmk_core/common/action.c ****         /* Extentions */
 413:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 414:../../tmk_core/common/action.c ****         case ACT_MACRO:
 415:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 416:../../tmk_core/common/action.c ****             break;
 417:../../tmk_core/common/action.c **** #endif
 418:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 419:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 420:../../tmk_core/common/action.c ****             if (!event.pressed) {
 421:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 422:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 423:../../tmk_core/common/action.c ****                         backlight_increase();
 424:../../tmk_core/common/action.c ****                         break;
 425:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 426:../../tmk_core/common/action.c ****                         backlight_decrease();
 427:../../tmk_core/common/action.c ****                         break;
 428:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 429:../../tmk_core/common/action.c ****                         backlight_toggle();
 430:../../tmk_core/common/action.c ****                         break;
 431:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 432:../../tmk_core/common/action.c ****                         backlight_step();
 433:../../tmk_core/common/action.c ****                         break;
 434:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 435:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 436:../../tmk_core/common/action.c ****                         break;
 437:../../tmk_core/common/action.c ****                 }
 438:../../tmk_core/common/action.c ****             }
 439:../../tmk_core/common/action.c ****             break;
 440:../../tmk_core/common/action.c **** #endif
 441:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 442:../../tmk_core/common/action.c ****             break;
 443:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 444:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 445:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 446:../../tmk_core/common/action.c ****             break;
 447:../../tmk_core/common/action.c **** #endif
 448:../../tmk_core/common/action.c ****         default:
 449:../../tmk_core/common/action.c ****             break;
 450:../../tmk_core/common/action.c ****     }
 451:../../tmk_core/common/action.c **** 
 452:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 453:../../tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 454:../../tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 455:../../tmk_core/common/action.c ****      */
 456:../../tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 457:../../tmk_core/common/action.c ****         record->event.pressed = false;
 458:../../tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 459:../../tmk_core/common/action.c ****         process_record(record);
 460:../../tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 461:../../tmk_core/common/action.c ****     }
 462:../../tmk_core/common/action.c **** #endif
 463:../../tmk_core/common/action.c **** }
 464:../../tmk_core/common/action.c **** 
 465:../../tmk_core/common/action.c **** 
 466:../../tmk_core/common/action.c **** 
 467:../../tmk_core/common/action.c **** 
 468:../../tmk_core/common/action.c **** /*
 469:../../tmk_core/common/action.c ****  * Utilities for actions.
 470:../../tmk_core/common/action.c ****  */
 471:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 472:../../tmk_core/common/action.c **** {
 114               		.loc 1 472 0
 115               		.cfi_startproc
 116               	.LVL6:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
 473:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 121               		.loc 1 473 0
 122 0000 8823      		tst r24
 123 0002 01F4      		brne .+2
 124 0004 00C0      		rjmp .L3
 474:../../tmk_core/common/action.c ****         return;
 475:../../tmk_core/common/action.c ****     }
 476:../../tmk_core/common/action.c **** 
 477:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 478:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 125               		.loc 1 478 0
 126 0006 8238      		cpi r24,lo8(-126)
 127 0008 01F4      		brne .L6
 479:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 480:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 481:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 128               		.loc 1 481 0
 129 000a 0E94 0000 		call host_keyboard_leds
 130               	.LVL7:
 131 000e 81FD      		sbrc r24,1
 132 0010 00C0      		rjmp .L3
 482:../../tmk_core/common/action.c **** #endif
 483:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 133               		.loc 1 483 0
 134 0012 89E3      		ldi r24,lo8(57)
 135 0014 0E94 0000 		call add_key
 136               	.LVL8:
 484:../../tmk_core/common/action.c ****         send_keyboard_report();
 137               		.loc 1 484 0
 138 0018 0E94 0000 		call send_keyboard_report
 139               	.LVL9:
 485:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 140               		.loc 1 485 0
 141 001c 89E3      		ldi r24,lo8(57)
 142 001e 00C0      		rjmp .L38
 143               	.LVL10:
 144               	.L6:
 486:../../tmk_core/common/action.c ****         send_keyboard_report();
 487:../../tmk_core/common/action.c ****     }
 488:../../tmk_core/common/action.c **** 
 489:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 145               		.loc 1 489 0
 146 0020 8338      		cpi r24,lo8(-125)
 147 0022 01F4      		brne .L8
 490:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 491:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 148               		.loc 1 491 0
 149 0024 0E94 0000 		call host_keyboard_leds
 150               	.LVL11:
 151 0028 80FD      		sbrc r24,0
 152 002a 00C0      		rjmp .L3
 492:../../tmk_core/common/action.c **** #endif
 493:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 153               		.loc 1 493 0
 154 002c 83E5      		ldi r24,lo8(83)
 155 002e 0E94 0000 		call add_key
 156               	.LVL12:
 494:../../tmk_core/common/action.c ****         send_keyboard_report();
 157               		.loc 1 494 0
 158 0032 0E94 0000 		call send_keyboard_report
 159               	.LVL13:
 495:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 160               		.loc 1 495 0
 161 0036 83E5      		ldi r24,lo8(83)
 162               	.L38:
 163 0038 0E94 0000 		call del_key
 164               	.LVL14:
 165               	.L39:
 496:../../tmk_core/common/action.c ****         send_keyboard_report();
 166               		.loc 1 496 0
 167 003c 0C94 0000 		jmp send_keyboard_report
 168               	.LVL15:
 169               	.L8:
 497:../../tmk_core/common/action.c ****     }
 498:../../tmk_core/common/action.c **** 
 499:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 170               		.loc 1 499 0
 171 0040 8438      		cpi r24,lo8(-124)
 172 0042 01F4      		brne .L9
 500:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 501:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 173               		.loc 1 501 0
 174 0044 0E94 0000 		call host_keyboard_leds
 175               	.LVL16:
 176 0048 82FD      		sbrc r24,2
 177 004a 00C0      		rjmp .L3
 502:../../tmk_core/common/action.c **** #endif
 503:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 178               		.loc 1 503 0
 179 004c 87E4      		ldi r24,lo8(71)
 180 004e 0E94 0000 		call add_key
 181               	.LVL17:
 504:../../tmk_core/common/action.c ****         send_keyboard_report();
 182               		.loc 1 504 0
 183 0052 0E94 0000 		call send_keyboard_report
 184               	.LVL18:
 505:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 185               		.loc 1 505 0
 186 0056 87E4      		ldi r24,lo8(71)
 187 0058 00C0      		rjmp .L38
 188               	.LVL19:
 189               	.L9:
 506:../../tmk_core/common/action.c ****         send_keyboard_report();
 507:../../tmk_core/common/action.c ****     }
 508:../../tmk_core/common/action.c **** #endif
 509:../../tmk_core/common/action.c **** 
 510:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 190               		.loc 1 510 0
 191 005a 9CEF      		ldi r25,lo8(-4)
 192 005c 980F      		add r25,r24
 193 005e 913A      		cpi r25,lo8(-95)
 194 0060 00F4      		brsh .L10
 511:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 512:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 513:../../tmk_core/common/action.c **** 
 514:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 515:../../tmk_core/common/action.c **** /* TODO: remove
 516:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 517:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 518:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 519:../../tmk_core/common/action.c **** 
 520:../../tmk_core/common/action.c ****             add_key(code);
 521:../../tmk_core/common/action.c ****             send_keyboard_report();
 522:../../tmk_core/common/action.c **** 
 523:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 524:../../tmk_core/common/action.c ****             send_keyboard_report();
 525:../../tmk_core/common/action.c ****             oneshot_cancel();
 526:../../tmk_core/common/action.c ****         } else
 527:../../tmk_core/common/action.c **** */
 528:../../tmk_core/common/action.c **** #endif
 529:../../tmk_core/common/action.c ****         {
 530:../../tmk_core/common/action.c ****             add_key(code);
 195               		.loc 1 530 0
 196 0062 0E94 0000 		call add_key
 197               	.LVL20:
 198 0066 00C0      		rjmp .L39
 199               	.LVL21:
 200               	.L10:
 531:../../tmk_core/common/action.c ****             send_keyboard_report();
 532:../../tmk_core/common/action.c ****         }
 533:../../tmk_core/common/action.c ****     }
 534:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 201               		.loc 1 534 0
 202 0068 90E2      		ldi r25,lo8(32)
 203 006a 980F      		add r25,r24
 204 006c 9830      		cpi r25,lo8(8)
 205 006e 00F4      		brsh .L11
 535:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 206               		.loc 1 535 0
 207 0070 8770      		andi r24,lo8(7)
 208               	.LVL22:
 209 0072 91E0      		ldi r25,lo8(1)
 210 0074 00C0      		rjmp 2f
 211               		1:
 212 0076 990F      		lsl r25
 213               		2:
 214 0078 8A95      		dec r24
 215 007a 02F4      		brpl 1b
 216 007c 892F      		mov r24,r25
 217 007e 0E94 0000 		call add_mods
 218               	.LVL23:
 219 0082 00C0      		rjmp .L39
 220               	.LVL24:
 221               	.L11:
 536:../../tmk_core/common/action.c ****         send_keyboard_report();
 537:../../tmk_core/common/action.c ****     }
 538:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 222               		.loc 1 538 0
 223 0084 9BE5      		ldi r25,lo8(91)
 224 0086 980F      		add r25,r24
 225 0088 9330      		cpi r25,lo8(3)
 226 008a 00F4      		brsh .L12
 539:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 227               		.loc 1 539 0
 228 008c 853A      		cpi r24,lo8(-91)
 229 008e 01F0      		breq .L15
 230               		.loc 1 539 0 is_stmt 0 discriminator 1
 231 0090 863A      		cpi r24,lo8(-90)
 232 0092 01F4      		brne .L16
 233               		.loc 1 539 0
 234 0094 82E8      		ldi r24,lo8(-126)
 235 0096 90E0      		ldi r25,0
 236               	.LVL25:
 237 0098 00C0      		rjmp .L13
 238               	.LVL26:
 239               	.L15:
 240 009a 81E8      		ldi r24,lo8(-127)
 241 009c 90E0      		ldi r25,0
 242               	.LVL27:
 243 009e 00C0      		rjmp .L13
 244               	.LVL28:
 245               	.L16:
 246 00a0 83E8      		ldi r24,lo8(-125)
 247 00a2 90E0      		ldi r25,0
 248               	.LVL29:
 249               	.L13:
 250               		.loc 1 539 0 discriminator 4
 251 00a4 0C94 0000 		jmp host_system_send
 252               	.LVL30:
 253               	.L12:
 540:../../tmk_core/common/action.c ****     }
 541:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 254               		.loc 1 541 0 is_stmt 1
 255 00a8 98E5      		ldi r25,lo8(88)
 256 00aa 980F      		add r25,r24
 257 00ac 9531      		cpi r25,lo8(21)
 258 00ae 00F0      		brlo .+2
 259 00b0 00C0      		rjmp .L3
 542:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 260               		.loc 1 542 0
 261 00b2 883A      		cpi r24,lo8(-88)
 262 00b4 01F0      		breq .L17
 263               		.loc 1 542 0 is_stmt 0 discriminator 1
 264 00b6 893A      		cpi r24,lo8(-87)
 265 00b8 01F0      		breq .L18
 266               		.loc 1 542 0 discriminator 3
 267 00ba 8A3A      		cpi r24,lo8(-86)
 268 00bc 01F0      		breq .L19
 269               		.loc 1 542 0 discriminator 5
 270 00be 8B3A      		cpi r24,lo8(-85)
 271 00c0 01F0      		breq .L20
 272               		.loc 1 542 0 discriminator 7
 273 00c2 8C3A      		cpi r24,lo8(-84)
 274 00c4 01F0      		breq .L21
 275               		.loc 1 542 0 discriminator 9
 276 00c6 8B3B      		cpi r24,lo8(-69)
 277 00c8 01F0      		breq .L22
 278               		.loc 1 542 0 discriminator 11
 279 00ca 8C3B      		cpi r24,lo8(-68)
 280 00cc 01F0      		breq .L23
 281               		.loc 1 542 0 discriminator 13
 282 00ce 8D3A      		cpi r24,lo8(-83)
 283 00d0 01F0      		breq .L24
 284               		.loc 1 542 0 discriminator 15
 285 00d2 803B      		cpi r24,lo8(-80)
 286 00d4 01F0      		breq .L25
 287               		.loc 1 542 0 discriminator 17
 288 00d6 8E3A      		cpi r24,lo8(-82)
 289 00d8 01F0      		breq .L26
 290               		.loc 1 542 0 discriminator 19
 291 00da 8F3A      		cpi r24,lo8(-81)
 292 00dc 01F0      		breq .L27
 293               		.loc 1 542 0 discriminator 21
 294 00de 813B      		cpi r24,lo8(-79)
 295 00e0 01F0      		breq .L28
 296               		.loc 1 542 0 discriminator 23
 297 00e2 823B      		cpi r24,lo8(-78)
 298 00e4 01F0      		breq .L29
 299               		.loc 1 542 0 discriminator 25
 300 00e6 833B      		cpi r24,lo8(-77)
 301 00e8 01F0      		breq .L30
 302               		.loc 1 542 0 discriminator 27
 303 00ea 843B      		cpi r24,lo8(-76)
 304 00ec 01F0      		breq .L31
 305               		.loc 1 542 0 discriminator 29
 306 00ee 853B      		cpi r24,lo8(-75)
 307 00f0 01F0      		breq .L32
 308               		.loc 1 542 0 discriminator 31
 309 00f2 863B      		cpi r24,lo8(-74)
 310 00f4 01F0      		breq .L33
 311               		.loc 1 542 0 discriminator 33
 312 00f6 873B      		cpi r24,lo8(-73)
 313 00f8 01F0      		breq .L34
 314               		.loc 1 542 0 discriminator 35
 315 00fa 883B      		cpi r24,lo8(-72)
 316 00fc 01F0      		breq .L35
 317               		.loc 1 542 0 discriminator 37
 318 00fe 893B      		cpi r24,lo8(-71)
 319 0100 01F0      		breq .L36
 320               		.loc 1 542 0 discriminator 39
 321 0102 8A3B      		cpi r24,lo8(-70)
 322 0104 01F0      		breq .+2
 323 0106 00C0      		rjmp .L37
 324               		.loc 1 542 0
 325 0108 8AE2      		ldi r24,lo8(42)
 326 010a 92E0      		ldi r25,lo8(2)
 327               	.LVL31:
 328 010c 00C0      		rjmp .L14
 329               	.LVL32:
 330               	.L17:
 331 010e 82EE      		ldi r24,lo8(-30)
 332 0110 90E0      		ldi r25,0
 333               	.LVL33:
 334 0112 00C0      		rjmp .L14
 335               	.LVL34:
 336               	.L18:
 337 0114 89EE      		ldi r24,lo8(-23)
 338 0116 90E0      		ldi r25,0
 339               	.LVL35:
 340 0118 00C0      		rjmp .L14
 341               	.LVL36:
 342               	.L19:
 343 011a 8AEE      		ldi r24,lo8(-22)
 344 011c 90E0      		ldi r25,0
 345               	.LVL37:
 346 011e 00C0      		rjmp .L14
 347               	.LVL38:
 348               	.L20:
 349 0120 85EB      		ldi r24,lo8(-75)
 350 0122 90E0      		ldi r25,0
 351               	.LVL39:
 352 0124 00C0      		rjmp .L14
 353               	.LVL40:
 354               	.L21:
 355 0126 86EB      		ldi r24,lo8(-74)
 356 0128 90E0      		ldi r25,0
 357               	.LVL41:
 358 012a 00C0      		rjmp .L14
 359               	.LVL42:
 360               	.L22:
 361 012c 83EB      		ldi r24,lo8(-77)
 362 012e 90E0      		ldi r25,0
 363               	.LVL43:
 364 0130 00C0      		rjmp .L14
 365               	.LVL44:
 366               	.L23:
 367 0132 84EB      		ldi r24,lo8(-76)
 368 0134 90E0      		ldi r25,0
 369               	.LVL45:
 370 0136 00C0      		rjmp .L14
 371               	.LVL46:
 372               	.L24:
 373 0138 87EB      		ldi r24,lo8(-73)
 374 013a 90E0      		ldi r25,0
 375               	.LVL47:
 376 013c 00C0      		rjmp .L14
 377               	.LVL48:
 378               	.L25:
 379 013e 8CEC      		ldi r24,lo8(-52)
 380 0140 90E0      		ldi r25,0
 381               	.LVL49:
 382 0142 00C0      		rjmp .L14
 383               	.LVL50:
 384               	.L26:
 385 0144 8DEC      		ldi r24,lo8(-51)
 386 0146 90E0      		ldi r25,0
 387               	.LVL51:
 388 0148 00C0      		rjmp .L14
 389               	.LVL52:
 390               	.L27:
 391 014a 83E8      		ldi r24,lo8(-125)
 392 014c 91E0      		ldi r25,lo8(1)
 393               	.LVL53:
 394 014e 00C0      		rjmp .L14
 395               	.LVL54:
 396               	.L28:
 397 0150 8AE8      		ldi r24,lo8(-118)
 398 0152 91E0      		ldi r25,lo8(1)
 399               	.LVL55:
 400 0154 00C0      		rjmp .L14
 401               	.LVL56:
 402               	.L29:
 403 0156 82E9      		ldi r24,lo8(-110)
 404 0158 91E0      		ldi r25,lo8(1)
 405               	.LVL57:
 406 015a 00C0      		rjmp .L14
 407               	.LVL58:
 408               	.L30:
 409 015c 84E9      		ldi r24,lo8(-108)
 410 015e 91E0      		ldi r25,lo8(1)
 411               	.LVL59:
 412 0160 00C0      		rjmp .L14
 413               	.LVL60:
 414               	.L31:
 415 0162 81E2      		ldi r24,lo8(33)
 416 0164 92E0      		ldi r25,lo8(2)
 417               	.LVL61:
 418 0166 00C0      		rjmp .L14
 419               	.LVL62:
 420               	.L32:
 421 0168 83E2      		ldi r24,lo8(35)
 422 016a 92E0      		ldi r25,lo8(2)
 423               	.LVL63:
 424 016c 00C0      		rjmp .L14
 425               	.LVL64:
 426               	.L33:
 427 016e 84E2      		ldi r24,lo8(36)
 428 0170 92E0      		ldi r25,lo8(2)
 429               	.LVL65:
 430 0172 00C0      		rjmp .L14
 431               	.LVL66:
 432               	.L34:
 433 0174 85E2      		ldi r24,lo8(37)
 434 0176 92E0      		ldi r25,lo8(2)
 435               	.LVL67:
 436 0178 00C0      		rjmp .L14
 437               	.LVL68:
 438               	.L35:
 439 017a 86E2      		ldi r24,lo8(38)
 440 017c 92E0      		ldi r25,lo8(2)
 441               	.LVL69:
 442 017e 00C0      		rjmp .L14
 443               	.LVL70:
 444               	.L36:
 445 0180 87E2      		ldi r24,lo8(39)
 446 0182 92E0      		ldi r25,lo8(2)
 447               	.LVL71:
 448 0184 00C0      		rjmp .L14
 449               	.LVL72:
 450               	.L37:
 451 0186 80E0      		ldi r24,0
 452 0188 90E0      		ldi r25,0
 453               	.LVL73:
 454               	.L14:
 455               		.loc 1 542 0 discriminator 43
 456 018a 0C94 0000 		jmp host_consumer_send
 457               	.LVL74:
 458               	.L3:
 459 018e 0895      		ret
 460               		.cfi_endproc
 461               	.LFE108:
 463               		.section	.text.unregister_code,"ax",@progbits
 464               	.global	unregister_code
 466               	unregister_code:
 467               	.LFB109:
 543:../../tmk_core/common/action.c ****     }
 544:../../tmk_core/common/action.c **** }
 545:../../tmk_core/common/action.c **** 
 546:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 547:../../tmk_core/common/action.c **** {
 468               		.loc 1 547 0 is_stmt 1
 469               		.cfi_startproc
 470               	.LVL75:
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 548:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 475               		.loc 1 548 0
 476 0000 8823      		tst r24
 477 0002 01F4      		brne .+2
 478 0004 00C0      		rjmp .L41
 549:../../tmk_core/common/action.c ****         return;
 550:../../tmk_core/common/action.c ****     }
 551:../../tmk_core/common/action.c **** 
 552:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 479               		.loc 1 553 0
 480 0006 8238      		cpi r24,lo8(-126)
 481 0008 01F4      		brne .L44
 554:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 556:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 482               		.loc 1 556 0
 483 000a 0E94 0000 		call host_keyboard_leds
 484               	.LVL76:
 485 000e 81FF      		sbrs r24,1
 486 0010 00C0      		rjmp .L41
 557:../../tmk_core/common/action.c **** #endif
 558:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 487               		.loc 1 558 0
 488 0012 89E3      		ldi r24,lo8(57)
 489 0014 0E94 0000 		call add_key
 490               	.LVL77:
 559:../../tmk_core/common/action.c ****         send_keyboard_report();
 491               		.loc 1 559 0
 492 0018 0E94 0000 		call send_keyboard_report
 493               	.LVL78:
 560:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 494               		.loc 1 560 0
 495 001c 89E3      		ldi r24,lo8(57)
 496 001e 00C0      		rjmp .L60
 497               	.LVL79:
 498               	.L44:
 561:../../tmk_core/common/action.c ****         send_keyboard_report();
 562:../../tmk_core/common/action.c ****     }
 563:../../tmk_core/common/action.c **** 
 564:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 499               		.loc 1 564 0
 500 0020 8338      		cpi r24,lo8(-125)
 501 0022 01F4      		brne .L46
 565:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 502               		.loc 1 566 0
 503 0024 0E94 0000 		call host_keyboard_leds
 504               	.LVL80:
 505 0028 80FF      		sbrs r24,0
 506 002a 00C0      		rjmp .L41
 567:../../tmk_core/common/action.c **** #endif
 568:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 507               		.loc 1 568 0
 508 002c 83E5      		ldi r24,lo8(83)
 509 002e 0E94 0000 		call add_key
 510               	.LVL81:
 569:../../tmk_core/common/action.c ****         send_keyboard_report();
 511               		.loc 1 569 0
 512 0032 0E94 0000 		call send_keyboard_report
 513               	.LVL82:
 570:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 514               		.loc 1 570 0
 515 0036 83E5      		ldi r24,lo8(83)
 516               	.L60:
 517 0038 0E94 0000 		call del_key
 518               	.LVL83:
 519               	.L61:
 571:../../tmk_core/common/action.c ****         send_keyboard_report();
 520               		.loc 1 571 0
 521 003c 0C94 0000 		jmp send_keyboard_report
 522               	.LVL84:
 523               	.L46:
 572:../../tmk_core/common/action.c ****     }
 573:../../tmk_core/common/action.c **** 
 574:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 524               		.loc 1 574 0
 525 0040 8438      		cpi r24,lo8(-124)
 526 0042 01F4      		brne .L47
 575:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 527               		.loc 1 576 0
 528 0044 0E94 0000 		call host_keyboard_leds
 529               	.LVL85:
 530 0048 82FF      		sbrs r24,2
 531 004a 00C0      		rjmp .L41
 577:../../tmk_core/common/action.c **** #endif
 578:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 532               		.loc 1 578 0
 533 004c 87E4      		ldi r24,lo8(71)
 534 004e 0E94 0000 		call add_key
 535               	.LVL86:
 579:../../tmk_core/common/action.c ****         send_keyboard_report();
 536               		.loc 1 579 0
 537 0052 0E94 0000 		call send_keyboard_report
 538               	.LVL87:
 580:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 539               		.loc 1 580 0
 540 0056 87E4      		ldi r24,lo8(71)
 541 0058 00C0      		rjmp .L60
 542               	.LVL88:
 543               	.L47:
 581:../../tmk_core/common/action.c ****         send_keyboard_report();
 582:../../tmk_core/common/action.c ****     }
 583:../../tmk_core/common/action.c **** #endif
 584:../../tmk_core/common/action.c **** 
 585:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 544               		.loc 1 585 0
 545 005a 9CEF      		ldi r25,lo8(-4)
 546 005c 980F      		add r25,r24
 547 005e 913A      		cpi r25,lo8(-95)
 548 0060 00F0      		brlo .L60
 586:../../tmk_core/common/action.c ****         del_key(code);
 587:../../tmk_core/common/action.c ****         send_keyboard_report();
 588:../../tmk_core/common/action.c ****     }
 589:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 549               		.loc 1 589 0
 550 0062 90E2      		ldi r25,lo8(32)
 551 0064 980F      		add r25,r24
 552 0066 9830      		cpi r25,lo8(8)
 553 0068 00F4      		brsh .L49
 590:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 554               		.loc 1 590 0
 555 006a 8770      		andi r24,lo8(7)
 556               	.LVL89:
 557 006c 91E0      		ldi r25,lo8(1)
 558 006e 00C0      		rjmp 2f
 559               		1:
 560 0070 990F      		lsl r25
 561               		2:
 562 0072 8A95      		dec r24
 563 0074 02F4      		brpl 1b
 564 0076 892F      		mov r24,r25
 565 0078 0E94 0000 		call del_mods
 566               	.LVL90:
 567 007c 00C0      		rjmp .L61
 568               	.LVL91:
 569               	.L49:
 591:../../tmk_core/common/action.c ****         send_keyboard_report();
 592:../../tmk_core/common/action.c ****     }
 593:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 570               		.loc 1 593 0
 571 007e 9BE5      		ldi r25,lo8(91)
 572 0080 980F      		add r25,r24
 573 0082 9330      		cpi r25,lo8(3)
 574 0084 00F4      		brsh .L50
 594:../../tmk_core/common/action.c ****         host_system_send(0);
 575               		.loc 1 594 0
 576 0086 80E0      		ldi r24,0
 577 0088 90E0      		ldi r25,0
 578               	.LVL92:
 579 008a 0C94 0000 		jmp host_system_send
 580               	.LVL93:
 581               	.L50:
 595:../../tmk_core/common/action.c ****     }
 596:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 582               		.loc 1 596 0
 583 008e 885A      		subi r24,lo8(-(88))
 584               	.LVL94:
 585 0090 8531      		cpi r24,lo8(21)
 586 0092 00F4      		brsh .L41
 597:../../tmk_core/common/action.c ****         host_consumer_send(0);
 587               		.loc 1 597 0
 588 0094 80E0      		ldi r24,0
 589 0096 90E0      		ldi r25,0
 590               	.LVL95:
 591 0098 0C94 0000 		jmp host_consumer_send
 592               	.LVL96:
 593               	.L41:
 594 009c 0895      		ret
 595               		.cfi_endproc
 596               	.LFE109:
 598               		.section	.text.register_mods,"ax",@progbits
 599               	.global	register_mods
 601               	register_mods:
 602               	.LFB110:
 598:../../tmk_core/common/action.c ****     }
 599:../../tmk_core/common/action.c **** }
 600:../../tmk_core/common/action.c **** 
 601:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 602:../../tmk_core/common/action.c **** {
 603               		.loc 1 602 0
 604               		.cfi_startproc
 605               	.LVL97:
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 0 */
 609               	.L__stack_usage = 0
 603:../../tmk_core/common/action.c ****     if (mods) {
 610               		.loc 1 603 0
 611 0000 8823      		tst r24
 612 0002 01F0      		breq .L62
 604:../../tmk_core/common/action.c ****         add_mods(mods);
 613               		.loc 1 604 0
 614 0004 0E94 0000 		call add_mods
 615               	.LVL98:
 605:../../tmk_core/common/action.c ****         send_keyboard_report();
 616               		.loc 1 605 0
 617 0008 0C94 0000 		jmp send_keyboard_report
 618               	.LVL99:
 619               	.L62:
 620 000c 0895      		ret
 621               		.cfi_endproc
 622               	.LFE110:
 624               		.section	.text.unregister_mods,"ax",@progbits
 625               	.global	unregister_mods
 627               	unregister_mods:
 628               	.LFB111:
 606:../../tmk_core/common/action.c ****     }
 607:../../tmk_core/common/action.c **** }
 608:../../tmk_core/common/action.c **** 
 609:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 610:../../tmk_core/common/action.c **** {
 629               		.loc 1 610 0
 630               		.cfi_startproc
 631               	.LVL100:
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 611:../../tmk_core/common/action.c ****     if (mods) {
 636               		.loc 1 611 0
 637 0000 8823      		tst r24
 638 0002 01F0      		breq .L64
 612:../../tmk_core/common/action.c ****         del_mods(mods);
 639               		.loc 1 612 0
 640 0004 0E94 0000 		call del_mods
 641               	.LVL101:
 613:../../tmk_core/common/action.c ****         send_keyboard_report();
 642               		.loc 1 613 0
 643 0008 0C94 0000 		jmp send_keyboard_report
 644               	.LVL102:
 645               	.L64:
 646 000c 0895      		ret
 647               		.cfi_endproc
 648               	.LFE111:
 650               		.section	.text.process_action,"ax",@progbits
 651               	.global	process_action
 653               	process_action:
 654               	.LFB107:
  96:../../tmk_core/common/action.c **** {
 655               		.loc 1 96 0
 656               		.cfi_startproc
 657               	.LVL103:
 658 0000 8F92      		push r8
 659               	.LCFI4:
 660               		.cfi_def_cfa_offset 3
 661               		.cfi_offset 8, -2
 662 0002 9F92      		push r9
 663               	.LCFI5:
 664               		.cfi_def_cfa_offset 4
 665               		.cfi_offset 9, -3
 666 0004 AF92      		push r10
 667               	.LCFI6:
 668               		.cfi_def_cfa_offset 5
 669               		.cfi_offset 10, -4
 670 0006 BF92      		push r11
 671               	.LCFI7:
 672               		.cfi_def_cfa_offset 6
 673               		.cfi_offset 11, -5
 674 0008 CF92      		push r12
 675               	.LCFI8:
 676               		.cfi_def_cfa_offset 7
 677               		.cfi_offset 12, -6
 678 000a DF92      		push r13
 679               	.LCFI9:
 680               		.cfi_def_cfa_offset 8
 681               		.cfi_offset 13, -7
 682 000c EF92      		push r14
 683               	.LCFI10:
 684               		.cfi_def_cfa_offset 9
 685               		.cfi_offset 14, -8
 686 000e FF92      		push r15
 687               	.LCFI11:
 688               		.cfi_def_cfa_offset 10
 689               		.cfi_offset 15, -9
 690 0010 0F93      		push r16
 691               	.LCFI12:
 692               		.cfi_def_cfa_offset 11
 693               		.cfi_offset 16, -10
 694 0012 1F93      		push r17
 695               	.LCFI13:
 696               		.cfi_def_cfa_offset 12
 697               		.cfi_offset 17, -11
 698 0014 CF93      		push r28
 699               	.LCFI14:
 700               		.cfi_def_cfa_offset 13
 701               		.cfi_offset 28, -12
 702 0016 DF93      		push r29
 703               	.LCFI15:
 704               		.cfi_def_cfa_offset 14
 705               		.cfi_offset 29, -13
 706 0018 1F92      		push __zero_reg__
 707               	.LCFI16:
 708               		.cfi_def_cfa_offset 15
 709 001a CDB7      		in r28,__SP_L__
 710 001c DEB7      		in r29,__SP_H__
 711               	.LCFI17:
 712               		.cfi_def_cfa_register 28
 713               	/* prologue: function */
 714               	/* frame size = 1 */
 715               	/* stack size = 13 */
 716               	.L__stack_usage = 13
 717 001e 4C01      		movw r8,r24
 718 0020 A62E      		mov r10,r22
 719 0022 472F      		mov r20,r23
 720               	.LVL104:
 100:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 721               		.loc 1 100 0
 722 0024 FC01      		movw r30,r24
 723 0026 F580      		ldd r15,Z+5
 724 0028 F294      		swap r15
 725 002a 8FE0      		ldi r24,lo8(15)
 726               	.LVL105:
 727 002c F822      		and r15,r24
 728               	.LVL106:
 110:../../tmk_core/common/action.c ****     if (event.pressed) {
 729               		.loc 1 110 0
 730 002e E280      		ldd r14,Z+2
 731 0030 EE20      		tst r14
 732 0032 01F0      		breq .L67
 112:../../tmk_core/common/action.c ****         clear_weak_mods();
 733               		.loc 1 112 0
 734 0034 7983      		std Y+1,r23
 735               	.LVL107:
 736 0036 0E94 0000 		call clear_weak_mods
 737               	.LVL108:
 738 003a 4981      		ldd r20,Y+1
 739               	.LVL109:
 740               	.L67:
 117:../../tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 741               		.loc 1 117 0
 742 003c 4983      		std Y+1,r20
 743 003e 0E94 0000 		call is_oneshot_layer_active
 744               	.LVL110:
 745 0042 4981      		ldd r20,Y+1
 746 0044 8823      		tst r24
 747 0046 01F0      		breq .L135
 117:../../tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 748               		.loc 1 117 0 is_stmt 0 discriminator 1
 749 0048 EE20      		tst r14
 750 004a 01F0      		breq .L135
 751 004c 80E2      		ldi r24,lo8(32)
 752 004e 8A0D      		add r24,r10
 753 0050 8830      		cpi r24,lo8(8)
 754 0052 00F0      		brlo .L135
 118:../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 755               		.loc 1 118 0 is_stmt 1
 756 0054 82E0      		ldi r24,lo8(2)
 757 0056 0E94 0000 		call clear_oneshot_layer_state
 758               	.LVL111:
 119:../../tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 759               		.loc 1 119 0
 760 005a 0E94 0000 		call is_oneshot_layer_active
 761               	.LVL112:
 762 005e BB24      		clr r11
 763 0060 B394      		inc r11
 764 0062 B826      		eor r11,r24
 765               	.LVL113:
 766 0064 4981      		ldd r20,Y+1
 767 0066 00C0      		rjmp .L68
 768               	.LVL114:
 769               	.L135:
  97:../../tmk_core/common/action.c ****     bool do_release_oneshot = false;
 770               		.loc 1 97 0
 771 0068 B12C      		mov r11,__zero_reg__
 772               	.LVL115:
 773               	.L68:
 123:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 774               		.loc 1 123 0
 775 006a E42F      		mov r30,r20
 776 006c E295      		swap r30
 777 006e EF70      		andi r30,lo8(15)
 778 0070 F0E0      		ldi r31,0
 779 0072 E050      		subi r30,lo8(-(gs(.L71)))
 780 0074 F040      		sbci r31,hi8(-(gs(.L71)))
 781 0076 0C94 0000 		jmp __tablejump2__
 782               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 783               		.p2align	1
 784               	.L71:
 785 0000 0000      		.word gs(.L70)
 786 0002 0000      		.word gs(.L70)
 787 0004 0000      		.word gs(.L72)
 788 0006 0000      		.word gs(.L72)
 789 0008 0000      		.word gs(.L69)
 790 000a 0000      		.word gs(.L69)
 791 000c 0000      		.word gs(.L69)
 792 000e 0000      		.word gs(.L69)
 793 0010 0000      		.word gs(.L73)
 794 0012 0000      		.word gs(.L69)
 795 0014 0000      		.word gs(.L74)
 796 0016 0000      		.word gs(.L74)
 797 0018 0000      		.word gs(.L75)
 798 001a 0000      		.word gs(.L69)
 799 001c 0000      		.word gs(.L69)
 800 001e 0000      		.word gs(.L76)
 801               		.section	.text.process_action
 802               	.L70:
 803               	.LBB2:
 128:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 804               		.loc 1 128 0
 805 007a 842F      		mov r24,r20
 806 007c 807F      		andi r24,lo8(-16)
 807 007e 142F      		mov r17,r20
 808 0080 1F70      		andi r17,lo8(15)
 809 0082 8823      		tst r24
 810 0084 01F0      		breq .L78
 128:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 811               		.loc 1 128 0 is_stmt 0 discriminator 2
 812 0086 1295      		swap r17
 813 0088 107F      		andi r17,lo8(-16)
 814               	.L78:
 815               	.LVL116:
 130:../../tmk_core/common/action.c ****                 if (event.pressed) {
 816               		.loc 1 130 0 is_stmt 1 discriminator 3
 817 008a EE20      		tst r14
 818 008c 01F0      		breq .L79
 131:../../tmk_core/common/action.c ****                     if (mods) {
 819               		.loc 1 131 0
 820 008e 1123      		tst r17
 821 0090 01F4      		brne .+2
 822 0092 00C0      		rjmp .L163
 132:../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 823               		.loc 1 132 0
 824 0094 80E2      		ldi r24,lo8(32)
 825 0096 8A0D      		add r24,r10
 826 0098 8830      		cpi r24,lo8(8)
 827 009a 00F4      		brsh .L81
 135:../../tmk_core/common/action.c ****                             add_mods(mods);
 828               		.loc 1 135 0
 829 009c 812F      		mov r24,r17
 830 009e 0E94 0000 		call add_mods
 831               	.LVL117:
 832 00a2 00C0      		rjmp .L82
 833               	.LVL118:
 834               	.L81:
 137:../../tmk_core/common/action.c ****                             add_weak_mods(mods);
 835               		.loc 1 137 0
 836 00a4 812F      		mov r24,r17
 837 00a6 0E94 0000 		call add_weak_mods
 838               	.LVL119:
 839               	.L82:
 139:../../tmk_core/common/action.c ****                         send_keyboard_report();
 840               		.loc 1 139 0
 841 00aa 0E94 0000 		call send_keyboard_report
 842               	.LVL120:
 843 00ae 00C0      		rjmp .L163
 844               	.LVL121:
 845               	.L79:
 143:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 846               		.loc 1 143 0
 847 00b0 8A2D      		mov r24,r10
 848 00b2 0E94 0000 		call unregister_code
 849               	.LVL122:
 144:../../tmk_core/common/action.c ****                     if (mods) {
 850               		.loc 1 144 0
 851 00b6 1123      		tst r17
 852 00b8 01F4      		brne .+2
 853 00ba 00C0      		rjmp .L69
 145:../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 854               		.loc 1 145 0
 855 00bc 80E2      		ldi r24,lo8(32)
 856 00be 8A0D      		add r24,r10
 857 00c0 8830      		cpi r24,lo8(8)
 858 00c2 00F4      		brsh .L84
 146:../../tmk_core/common/action.c ****                             del_mods(mods);
 859               		.loc 1 146 0
 860 00c4 812F      		mov r24,r17
 861 00c6 0E94 0000 		call del_mods
 862               	.LVL123:
 863 00ca 00C0      		rjmp .L85
 864               	.L84:
 148:../../tmk_core/common/action.c ****                             del_weak_mods(mods);
 865               		.loc 1 148 0
 866 00cc 812F      		mov r24,r17
 867 00ce 0E94 0000 		call del_weak_mods
 868               	.LVL124:
 869               	.L85:
 150:../../tmk_core/common/action.c ****                         send_keyboard_report();
 870               		.loc 1 150 0
 871 00d2 0E94 0000 		call send_keyboard_report
 872               	.LVL125:
 873 00d6 00C0      		rjmp .L69
 874               	.LVL126:
 875               	.L72:
 876               	.LBE2:
 877               	.LBB3:
 159:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 878               		.loc 1 159 0
 879 00d8 942F      		mov r25,r20
 880 00da 907F      		andi r25,lo8(-16)
 881 00dc 842F      		mov r24,r20
 882 00de 8F70      		andi r24,lo8(15)
 883 00e0 9032      		cpi r25,lo8(32)
 884 00e2 01F0      		breq .L87
 159:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 885               		.loc 1 159 0 is_stmt 0 discriminator 2
 886 00e4 8295      		swap r24
 887 00e6 807F      		andi r24,lo8(-16)
 888               	.L87:
 889               	.LVL127:
 161:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 890               		.loc 1 161 0 is_stmt 1 discriminator 3
 891 00e8 AA20      		tst r10
 892 00ea 01F0      		breq .L89
 893 00ec F1E0      		ldi r31,lo8(1)
 894 00ee AF16      		cp r10,r31
 895 00f0 01F0      		breq .L90
 896 00f2 00C0      		rjmp .L167
 897               	.L89:
 165:../../tmk_core/common/action.c ****                         if (event.pressed) {
 898               		.loc 1 165 0
 899 00f4 EE20      		tst r14
 900 00f6 01F0      		breq .L91
 166:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 901               		.loc 1 166 0
 902 00f8 FF20      		tst r15
 903 00fa 01F0      		breq .L160
 169:../../tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 904               		.loc 1 169 0
 905 00fc 91E0      		ldi r25,lo8(1)
 906 00fe F912      		cpse r15,r25
 907 0100 00C0      		rjmp .L160
 171:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 908               		.loc 1 171 0
 909 0102 0E94 0000 		call set_oneshot_mods
 910               	.LVL128:
 911 0106 00C0      		rjmp .L69
 912               	.LVL129:
 913               	.L91:
 183:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 914               		.loc 1 183 0
 915 0108 FF20      		tst r15
 916 010a 01F0      		breq .L166
 186:../../tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 917               		.loc 1 186 0
 918 010c E1E0      		ldi r30,lo8(1)
 919 010e FE16      		cp r15,r30
 920 0110 01F4      		brne .+2
 921 0112 00C0      		rjmp .L69
 922               	.L166:
 198:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 923               		.loc 1 198 0
 924 0114 8983      		std Y+1,r24
 925 0116 0E94 0000 		call clear_oneshot_mods
 926               	.LVL130:
 199:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 927               		.loc 1 199 0
 928 011a 8981      		ldd r24,Y+1
 929 011c 00C0      		rjmp .L162
 930               	.LVL131:
 931               	.L90:
 205:../../tmk_core/common/action.c ****                         if (event.pressed) {
 932               		.loc 1 205 0
 933 011e EE20      		tst r14
 934 0120 01F0      		breq .L96
 206:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 935               		.loc 1 206 0
 936 0122 F5E0      		ldi r31,lo8(5)
 937 0124 FF15      		cp r31,r15
 938 0126 00F4      		brsh .+2
 939 0128 00C0      		rjmp .L69
 940 012a 00C0      		rjmp .L160
 941               	.L96:
 210:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 942               		.loc 1 210 0
 943 012c 94E0      		ldi r25,lo8(4)
 944 012e 9F15      		cp r25,r15
 945 0130 00F4      		brsh .+2
 946 0132 00C0      		rjmp .L69
 947 0134 00C0      		rjmp .L162
 948               	.L167:
 216:../../tmk_core/common/action.c ****                         if (event.pressed) {
 949               		.loc 1 216 0
 950 0136 EE20      		tst r14
 951 0138 01F0      		breq .L97
 217:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 952               		.loc 1 217 0
 953 013a FF20      		tst r15
 954 013c 01F0      		breq .L160
 219:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 955               		.loc 1 219 0
 956 013e F401      		movw r30,r8
 957 0140 9581      		ldd r25,Z+5
 958 0142 90FF      		sbrs r25,0
 959 0144 00C0      		rjmp .L163
 222:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 960               		.loc 1 222 0
 961 0146 9F70      		andi r25,lo8(15)
 962 0148 9583      		std Z+5,r25
 963               	.LVL132:
 964               	.L160:
 223:../../tmk_core/common/action.c ****                                     register_mods(mods);
 965               		.loc 1 223 0
 966 014a 0E94 0000 		call register_mods
 967               	.LVL133:
 968 014e 00C0      		rjmp .L69
 969               	.LVL134:
 970               	.L97:
 235:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 971               		.loc 1 235 0
 972 0150 FF20      		tst r15
 973 0152 01F4      		brne .+2
 974 0154 00C0      		rjmp .L162
 975 0156 00C0      		rjmp .L161
 976               	.LVL135:
 977               	.L73:
 978               	.LBE3:
 283:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 979               		.loc 1 283 0
 980 0158 842F      		mov r24,r20
 981 015a 8370      		andi r24,lo8(3)
 982 015c 01F0      		breq .+2
 983 015e 00C0      		rjmp .L101
 285:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 984               		.loc 1 285 0
 985 0160 E110      		cpse r14,__zero_reg__
 986 0162 00C0      		rjmp .L69
 987               	.LVL136:
 988               	.LBB4:
 286:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 989               		.loc 1 286 0
 990 0164 2A2D      		mov r18,r10
 991 0166 2295      		swap r18
 992 0168 2695      		lsr r18
 993 016a 2770      		andi r18,lo8(7)
 994 016c 220F      		lsl r18
 995 016e 220F      		lsl r18
 287:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 996               		.loc 1 287 0
 997 0170 8A2D      		mov r24,r10
 998 0172 8F70      		andi r24,lo8(15)
 999 0174 C82E      		mov r12,r24
 1000 0176 D12C      		mov r13,__zero_reg__
 1001 0178 E12C      		mov r14,__zero_reg__
 1002 017a F12C      		mov r15,__zero_reg__
 1003               	.LVL137:
 1004 017c 022E      		mov r0,r18
 1005 017e 00C0      		rjmp 2f
 1006               		1:
 1007 0180 CC0C      		lsl r12
 1008 0182 DD1C      		rol r13
 1009 0184 EE1C      		rol r14
 1010 0186 FF1C      		rol r15
 1011               		2:
 1012 0188 0A94      		dec r0
 1013 018a 02F4      		brpl 1b
 1014               	.LVL138:
 288:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1015               		.loc 1 288 0
 1016 018c A4FE      		sbrs r10,4
 1017 018e 00C0      		rjmp .L136
 288:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1018               		.loc 1 288 0 is_stmt 0 discriminator 1
 1019 0190 6FE0      		ldi r22,lo8(15)
 1020 0192 70E0      		ldi r23,0
 1021 0194 80E0      		ldi r24,0
 1022 0196 90E0      		ldi r25,0
 1023 0198 00C0      		rjmp 2f
 1024               		1:
 1025 019a 660F      		lsl r22
 1026 019c 771F      		rol r23
 1027 019e 881F      		rol r24
 1028 01a0 991F      		rol r25
 1029               		2:
 1030 01a2 2A95      		dec r18
 1031 01a4 02F4      		brpl 1b
 1032 01a6 6095      		com r22
 1033 01a8 7095      		com r23
 1034 01aa 8095      		com r24
 1035 01ac 9095      		com r25
 1036 01ae 00C0      		rjmp .L102
 1037               	.L136:
 288:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1038               		.loc 1 288 0
 1039 01b0 60E0      		ldi r22,0
 1040 01b2 70E0      		ldi r23,0
 1041 01b4 CB01      		movw r24,r22
 1042               	.L102:
 1043               	.LVL139:
 289:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1044               		.loc 1 289 0 is_stmt 1 discriminator 3
 1045 01b6 242F      		mov r18,r20
 1046 01b8 2695      		lsr r18
 1047 01ba 2695      		lsr r18
 1048 01bc 2370      		andi r18,lo8(3)
 1049 01be 30E0      		ldi r19,0
 1050 01c0 2230      		cpi r18,2
 1051 01c2 3105      		cpc r19,__zero_reg__
 1052 01c4 01F0      		breq .L104
 1053 01c6 2330      		cpi r18,3
 1054 01c8 3105      		cpc r19,__zero_reg__
 1055 01ca 01F0      		breq .L105
 1056 01cc 6C29      		or r22,r12
 1057 01ce 7D29      		or r23,r13
 1058 01d0 8E29      		or r24,r14
 1059 01d2 9F29      		or r25,r15
 1060               	.LVL140:
 1061 01d4 2130      		cpi r18,1
 1062 01d6 3105      		cpc r19,__zero_reg__
 1063 01d8 01F0      		breq .L164
 290:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1064               		.loc 1 290 0 discriminator 3
 1065 01da 0E94 0000 		call default_layer_and
 1066               	.LVL141:
 1067 01de 00C0      		rjmp .L69
 1068               	.LVL142:
 1069               	.L104:
 292:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1070               		.loc 1 292 0
 1071 01e0 6C29      		or r22,r12
 1072 01e2 7D29      		or r23,r13
 1073 01e4 8E29      		or r24,r14
 1074 01e6 9F29      		or r25,r15
 1075               	.LVL143:
 1076 01e8 0E94 0000 		call default_layer_xor
 1077               	.LVL144:
 1078 01ec 00C0      		rjmp .L69
 1079               	.LVL145:
 1080               	.L105:
 293:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1081               		.loc 1 293 0
 1082 01ee 0E94 0000 		call default_layer_and
 1083               	.LVL146:
 1084 01f2 C701      		movw r24,r14
 1085 01f4 B601      		movw r22,r12
 1086               	.LVL147:
 1087               	.L164:
 1088 01f6 0E94 0000 		call default_layer_or
 1089               	.LVL148:
 1090 01fa 00C0      		rjmp .L69
 1091               	.LVL149:
 1092               	.L101:
 1093               	.LBE4:
 298:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1094               		.loc 1 298 0
 1095 01fc EE20      		tst r14
 1096 01fe 01F0      		breq .L107
 298:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1097               		.loc 1 298 0 is_stmt 0 discriminator 1
 1098 0200 842F      		mov r24,r20
 1099 0202 8170      		andi r24,lo8(1)
 1100 0204 00C0      		rjmp .L108
 1101               	.L107:
 298:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1102               		.loc 1 298 0 discriminator 2
 1103 0206 8695      		lsr r24
 1104               	.L108:
 298:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1105               		.loc 1 298 0 discriminator 3
 1106 0208 8823      		tst r24
 1107 020a 01F4      		brne .+2
 1108 020c 00C0      		rjmp .L69
 1109               	.LVL150:
 1110               	.LBB5:
 300:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1111               		.loc 1 300 0 is_stmt 1
 1112 020e 2A2D      		mov r18,r10
 1113 0210 2295      		swap r18
 1114 0212 2695      		lsr r18
 1115 0214 2770      		andi r18,lo8(7)
 1116 0216 220F      		lsl r18
 1117 0218 220F      		lsl r18
 301:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1118               		.loc 1 301 0
 1119 021a 8A2D      		mov r24,r10
 1120 021c 8F70      		andi r24,lo8(15)
 1121 021e C82E      		mov r12,r24
 1122 0220 D12C      		mov r13,__zero_reg__
 1123 0222 E12C      		mov r14,__zero_reg__
 1124 0224 F12C      		mov r15,__zero_reg__
 1125               	.LVL151:
 1126 0226 022E      		mov r0,r18
 1127 0228 00C0      		rjmp 2f
 1128               		1:
 1129 022a CC0C      		lsl r12
 1130 022c DD1C      		rol r13
 1131 022e EE1C      		rol r14
 1132 0230 FF1C      		rol r15
 1133               		2:
 1134 0232 0A94      		dec r0
 1135 0234 02F4      		brpl 1b
 1136               	.LVL152:
 302:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1137               		.loc 1 302 0
 1138 0236 A4FE      		sbrs r10,4
 1139 0238 00C0      		rjmp .L137
 302:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1140               		.loc 1 302 0 is_stmt 0 discriminator 1
 1141 023a 6FE0      		ldi r22,lo8(15)
 1142 023c 70E0      		ldi r23,0
 1143 023e 80E0      		ldi r24,0
 1144 0240 90E0      		ldi r25,0
 1145 0242 00C0      		rjmp 2f
 1146               		1:
 1147 0244 660F      		lsl r22
 1148 0246 771F      		rol r23
 1149 0248 881F      		rol r24
 1150 024a 991F      		rol r25
 1151               		2:
 1152 024c 2A95      		dec r18
 1153 024e 02F4      		brpl 1b
 1154 0250 6095      		com r22
 1155 0252 7095      		com r23
 1156 0254 8095      		com r24
 1157 0256 9095      		com r25
 1158 0258 00C0      		rjmp .L109
 1159               	.L137:
 302:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1160               		.loc 1 302 0
 1161 025a 60E0      		ldi r22,0
 1162 025c 70E0      		ldi r23,0
 1163 025e CB01      		movw r24,r22
 1164               	.L109:
 1165               	.LVL153:
 303:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1166               		.loc 1 303 0 is_stmt 1 discriminator 3
 1167 0260 242F      		mov r18,r20
 1168 0262 2695      		lsr r18
 1169 0264 2695      		lsr r18
 1170 0266 2370      		andi r18,lo8(3)
 1171 0268 30E0      		ldi r19,0
 1172 026a 2230      		cpi r18,2
 1173 026c 3105      		cpc r19,__zero_reg__
 1174 026e 01F0      		breq .L111
 1175 0270 2330      		cpi r18,3
 1176 0272 3105      		cpc r19,__zero_reg__
 1177 0274 01F0      		breq .L112
 1178 0276 6C29      		or r22,r12
 1179 0278 7D29      		or r23,r13
 1180 027a 8E29      		or r24,r14
 1181 027c 9F29      		or r25,r15
 1182               	.LVL154:
 1183 027e 2130      		cpi r18,1
 1184 0280 3105      		cpc r19,__zero_reg__
 1185 0282 01F0      		breq .L165
 304:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1186               		.loc 1 304 0 discriminator 3
 1187 0284 0E94 0000 		call layer_and
 1188               	.LVL155:
 1189 0288 00C0      		rjmp .L69
 1190               	.LVL156:
 1191               	.L111:
 306:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1192               		.loc 1 306 0
 1193 028a 6C29      		or r22,r12
 1194 028c 7D29      		or r23,r13
 1195 028e 8E29      		or r24,r14
 1196 0290 9F29      		or r25,r15
 1197               	.LVL157:
 1198 0292 0E94 0000 		call layer_xor
 1199               	.LVL158:
 1200 0296 00C0      		rjmp .L69
 1201               	.LVL159:
 1202               	.L112:
 307:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1203               		.loc 1 307 0
 1204 0298 0E94 0000 		call layer_and
 1205               	.LVL160:
 1206 029c C701      		movw r24,r14
 1207 029e B601      		movw r22,r12
 1208               	.LVL161:
 1209               	.L165:
 1210 02a0 0E94 0000 		call layer_or
 1211               	.LVL162:
 1212 02a4 00C0      		rjmp .L69
 1213               	.LVL163:
 1214               	.L74:
 1215               	.LBE5:
 315:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1216               		.loc 1 315 0
 1217 02a6 0A2D      		mov r16,r10
 1218 02a8 10E0      		ldi r17,0
 1219 02aa F801      		movw r30,r16
 1220 02ac E05E      		subi r30,-32
 1221 02ae F109      		sbc r31,__zero_reg__
 1222 02b0 E531      		cpi r30,21
 1223 02b2 F105      		cpc r31,__zero_reg__
 1224 02b4 00F0      		brlo .+2
 1225 02b6 00C0      		rjmp .L114
 1226 02b8 E050      		subi r30,lo8(-(gs(.L116)))
 1227 02ba F040      		sbci r31,hi8(-(gs(.L116)))
 1228 02bc 0C94 0000 		jmp __tablejump2__
 1229               		.section	.progmem.gcc_sw_table.process_action
 1230               		.p2align	1
 1231               	.L116:
 1232 0020 0000      		.word gs(.L115)
 1233 0022 0000      		.word gs(.L115)
 1234 0024 0000      		.word gs(.L115)
 1235 0026 0000      		.word gs(.L115)
 1236 0028 0000      		.word gs(.L115)
 1237 002a 0000      		.word gs(.L115)
 1238 002c 0000      		.word gs(.L115)
 1239 002e 0000      		.word gs(.L115)
 1240 0030 0000      		.word gs(.L115)
 1241 0032 0000      		.word gs(.L115)
 1242 0034 0000      		.word gs(.L115)
 1243 0036 0000      		.word gs(.L115)
 1244 0038 0000      		.word gs(.L115)
 1245 003a 0000      		.word gs(.L115)
 1246 003c 0000      		.word gs(.L115)
 1247 003e 0000      		.word gs(.L115)
 1248 0040 0000      		.word gs(.L117)
 1249 0042 0000      		.word gs(.L118)
 1250 0044 0000      		.word gs(.L119)
 1251 0046 0000      		.word gs(.L120)
 1252 0048 0000      		.word gs(.L121)
 1253               		.section	.text.process_action
 1254               	.L115:
 1255 02c0 1A2D      		mov r17,r10
 1256 02c2 1F70      		andi r17,lo8(15)
 1257 02c4 842F      		mov r24,r20
 1258 02c6 8F71      		andi r24,lo8(31)
 318:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1259               		.loc 1 318 0
 1260 02c8 EE20      		tst r14
 1261 02ca 01F0      		breq .L122
 319:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1262               		.loc 1 319 0
 1263 02cc 0E94 0000 		call layer_on
 1264               	.LVL164:
 320:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1265               		.loc 1 320 0
 1266 02d0 812F      		mov r24,r17
 1267 02d2 00C0      		rjmp .L160
 1268               	.LVL165:
 1269               	.L122:
 322:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 1270               		.loc 1 322 0
 1271 02d4 0E94 0000 		call layer_off
 1272               	.LVL166:
 323:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1273               		.loc 1 323 0
 1274 02d8 812F      		mov r24,r17
 1275               	.LVL167:
 1276               	.L162:
 1277 02da 0E94 0000 		call unregister_mods
 1278               	.LVL168:
 1279 02de 00C0      		rjmp .L69
 1280               	.LVL169:
 1281               	.L117:
 328:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1282               		.loc 1 328 0
 1283 02e0 EE20      		tst r14
 1284 02e2 01F0      		breq .L123
 329:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1285               		.loc 1 329 0
 1286 02e4 F4E0      		ldi r31,lo8(4)
 1287 02e6 FF15      		cp r31,r15
 1288 02e8 00F4      		brsh .+2
 1289 02ea 00C0      		rjmp .L69
 1290               	.L124:
 330:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1291               		.loc 1 330 0
 1292 02ec 842F      		mov r24,r20
 1293 02ee 8F71      		andi r24,lo8(31)
 1294 02f0 0E94 0000 		call layer_invert
 1295               	.LVL170:
 1296 02f4 00C0      		rjmp .L69
 1297               	.LVL171:
 1298               	.L123:
 333:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1299               		.loc 1 333 0
 1300 02f6 85E0      		ldi r24,lo8(5)
 1301 02f8 8F15      		cp r24,r15
 1302 02fa 00F4      		brsh .+2
 1303 02fc 00C0      		rjmp .L69
 1304 02fe 00C0      		rjmp .L124
 1305               	.L118:
 339:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1306               		.loc 1 339 0
 1307 0300 EE20      		tst r14
 1308 0302 01F0      		breq .L125
 1309               	.L126:
 339:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1310               		.loc 1 339 0 is_stmt 0 discriminator 1
 1311 0304 842F      		mov r24,r20
 1312 0306 8F71      		andi r24,lo8(31)
 1313 0308 0E94 0000 		call layer_on
 1314               	.LVL172:
 1315 030c 00C0      		rjmp .L69
 1316               	.LVL173:
 1317               	.L119:
 343:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1318               		.loc 1 343 0 is_stmt 1
 1319 030e EE20      		tst r14
 1320 0310 01F0      		breq .L126
 1321               	.L125:
 340:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1322               		.loc 1 340 0
 1323 0312 842F      		mov r24,r20
 1324 0314 8F71      		andi r24,lo8(31)
 1325 0316 0E94 0000 		call layer_off
 1326               	.LVL174:
 1327 031a 00C0      		rjmp .L69
 1328               	.LVL175:
 1329               	.L120:
 347:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1330               		.loc 1 347 0
 1331 031c EE20      		tst r14
 1332 031e 01F0      		breq .L127
 347:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1333               		.loc 1 347 0 is_stmt 0 discriminator 1
 1334 0320 842F      		mov r24,r20
 1335 0322 8F71      		andi r24,lo8(31)
 1336 0324 0E94 0000 		call layer_move
 1337               	.LVL176:
 1338 0328 00C0      		rjmp .L69
 1339               	.LVL177:
 1340               	.L127:
 348:../../tmk_core/common/action.c ****                                     layer_clear();
 1341               		.loc 1 348 0 is_stmt 1
 1342 032a 0E94 0000 		call layer_clear
 1343               	.LVL178:
 1344 032e 00C0      		rjmp .L69
 1345               	.LVL179:
 1346               	.L121:
 376:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1347               		.loc 1 376 0
 1348 0330 EE20      		tst r14
 1349 0332 01F0      		breq .L128
 377:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1350               		.loc 1 377 0
 1351 0334 142F      		mov r17,r20
 1352 0336 1F71      		andi r17,lo8(31)
 1353 0338 812F      		mov r24,r17
 1354 033a 0E94 0000 		call layer_on
 1355               	.LVL180:
 378:../../tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1356               		.loc 1 378 0
 1357 033e 63E0      		ldi r22,lo8(3)
 1358 0340 812F      		mov r24,r17
 1359 0342 0E94 0000 		call set_oneshot_layer
 1360               	.LVL181:
 1361 0346 00C0      		rjmp .L69
 1362               	.LVL182:
 1363               	.L128:
 380:../../tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 1364               		.loc 1 380 0
 1365 0348 81E0      		ldi r24,lo8(1)
 1366 034a 0E94 0000 		call clear_oneshot_layer_state
 1367               	.LVL183:
 381:../../tmk_core/common/action.c ****                         if (tap_count > 1) {
 1368               		.loc 1 381 0
 1369 034e 91E0      		ldi r25,lo8(1)
 1370 0350 9F15      		cp r25,r15
 1371 0352 00F4      		brsh .L69
 382:../../tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1372               		.loc 1 382 0
 1373 0354 82E0      		ldi r24,lo8(2)
 1374 0356 0E94 0000 		call clear_oneshot_layer_state
 1375               	.LVL184:
 1376 035a 00C0      		rjmp .L69
 1377               	.LVL185:
 1378               	.L114:
 390:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1379               		.loc 1 390 0
 1380 035c EE20      		tst r14
 1381 035e 01F0      		breq .L129
 391:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1382               		.loc 1 391 0
 1383 0360 FF20      		tst r15
 1384 0362 01F0      		breq .L126
 1385               	.L163:
 393:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1386               		.loc 1 393 0
 1387 0364 8A2D      		mov r24,r10
 1388 0366 0E94 0000 		call register_code
 1389               	.LVL186:
 1390 036a 00C0      		rjmp .L69
 1391               	.LVL187:
 1392               	.L129:
 399:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1393               		.loc 1 399 0
 1394 036c FF20      		tst r15
 1395 036e 01F0      		breq .L125
 1396               	.L161:
 401:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1397               		.loc 1 401 0
 1398 0370 8A2D      		mov r24,r10
 1399 0372 0E94 0000 		call unregister_code
 1400               	.LVL188:
 1401 0376 00C0      		rjmp .L69
 1402               	.LVL189:
 1403               	.L75:
 415:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1404               		.loc 1 415 0
 1405 0378 4F70      		andi r20,lo8(15)
 1406               	.LVL190:
 1407 037a 6A2D      		mov r22,r10
 1408 037c C401      		movw r24,r8
 1409 037e 0E94 0000 		call action_get_macro
 1410               	.LVL191:
 1411 0382 0E94 0000 		call action_macro_play
 1412               	.LVL192:
 416:../../tmk_core/common/action.c ****             break;
 1413               		.loc 1 416 0
 1414 0386 00C0      		rjmp .L69
 1415               	.LVL193:
 1416               	.L76:
 445:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1417               		.loc 1 445 0
 1418 0388 4F70      		andi r20,lo8(15)
 1419               	.LVL194:
 1420 038a 6A2D      		mov r22,r10
 1421 038c C401      		movw r24,r8
 1422 038e 0E94 0000 		call action_function
 1423               	.LVL195:
 1424               	.L69:
 456:../../tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 1425               		.loc 1 456 0
 1426 0392 BB20      		tst r11
 1427 0394 01F0      		breq .L66
 456:../../tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 1428               		.loc 1 456 0 is_stmt 0 discriminator 1
 1429 0396 0E94 0000 		call get_oneshot_layer_state
 1430               	.LVL196:
 1431 039a 80FD      		sbrc r24,0
 1432 039c 00C0      		rjmp .L66
 457:../../tmk_core/common/action.c ****         record->event.pressed = false;
 1433               		.loc 1 457 0 is_stmt 1
 1434 039e F401      		movw r30,r8
 1435 03a0 1282      		std Z+2,__zero_reg__
 458:../../tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1436               		.loc 1 458 0
 1437 03a2 0E94 0000 		call get_oneshot_layer
 1438               	.LVL197:
 1439 03a6 0E94 0000 		call layer_on
 1440               	.LVL198:
 459:../../tmk_core/common/action.c ****         process_record(record);
 1441               		.loc 1 459 0
 1442 03aa C401      		movw r24,r8
 1443 03ac 0E94 0000 		call process_record
 1444               	.LVL199:
 460:../../tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1445               		.loc 1 460 0
 1446 03b0 0E94 0000 		call get_oneshot_layer
 1447               	.LVL200:
 1448               	/* epilogue start */
 463:../../tmk_core/common/action.c **** }
 1449               		.loc 1 463 0
 1450 03b4 0F90      		pop __tmp_reg__
 1451 03b6 DF91      		pop r29
 1452 03b8 CF91      		pop r28
 1453 03ba 1F91      		pop r17
 1454 03bc 0F91      		pop r16
 1455 03be FF90      		pop r15
 1456               	.LVL201:
 1457 03c0 EF90      		pop r14
 1458 03c2 DF90      		pop r13
 1459 03c4 CF90      		pop r12
 1460 03c6 BF90      		pop r11
 1461               	.LVL202:
 1462 03c8 AF90      		pop r10
 1463 03ca 9F90      		pop r9
 1464 03cc 8F90      		pop r8
 1465               	.LVL203:
 460:../../tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1466               		.loc 1 460 0
 1467 03ce 0C94 0000 		jmp layer_off
 1468               	.LVL204:
 1469               	.L66:
 1470               	/* epilogue start */
 463:../../tmk_core/common/action.c **** }
 1471               		.loc 1 463 0
 1472 03d2 0F90      		pop __tmp_reg__
 1473 03d4 DF91      		pop r29
 1474 03d6 CF91      		pop r28
 1475 03d8 1F91      		pop r17
 1476 03da 0F91      		pop r16
 1477 03dc FF90      		pop r15
 1478               	.LVL205:
 1479 03de EF90      		pop r14
 1480 03e0 DF90      		pop r13
 1481 03e2 CF90      		pop r12
 1482 03e4 BF90      		pop r11
 1483               	.LVL206:
 1484 03e6 AF90      		pop r10
 1485 03e8 9F90      		pop r9
 1486 03ea 8F90      		pop r8
 1487               	.LVL207:
 1488 03ec 0895      		ret
 1489               		.cfi_endproc
 1490               	.LFE107:
 1492               		.section	.text.process_record,"ax",@progbits
 1493               	.global	process_record
 1495               	process_record:
 1496               	.LFB106:
  78:../../tmk_core/common/action.c **** {
 1497               		.loc 1 78 0
 1498               		.cfi_startproc
 1499               	.LVL208:
 1500 0000 0F93      		push r16
 1501               	.LCFI18:
 1502               		.cfi_def_cfa_offset 3
 1503               		.cfi_offset 16, -2
 1504 0002 1F93      		push r17
 1505               	.LCFI19:
 1506               		.cfi_def_cfa_offset 4
 1507               		.cfi_offset 17, -3
 1508 0004 CF93      		push r28
 1509               	.LCFI20:
 1510               		.cfi_def_cfa_offset 5
 1511               		.cfi_offset 28, -4
 1512 0006 DF93      		push r29
 1513               	.LCFI21:
 1514               		.cfi_def_cfa_offset 6
 1515               		.cfi_offset 29, -5
 1516               	/* prologue: function */
 1517               	/* frame size = 0 */
 1518               	/* stack size = 4 */
 1519               	.L__stack_usage = 4
 1520 0008 EC01      		movw r28,r24
  79:../../tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1521               		.loc 1 79 0
 1522 000a 2881      		ld r18,Y
 1523 000c 3981      		ldd r19,Y+1
 1524               	.LBB8:
 1525               	.LBB9:
 1526               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1527               		.loc 2 49 0
 1528 000e 8B81      		ldd r24,Y+3
 1529 0010 9C81      		ldd r25,Y+4
 1530               	.LVL209:
 1531 0012 892B      		or r24,r25
 1532 0014 01F0      		breq .L174
 1533 0016 3F3F      		cpi r19,lo8(-1)
 1534 0018 01F0      		breq .L170
 1535               	.L171:
 1536 001a 80E0      		ldi r24,0
 1537 001c 00C0      		rjmp .L169
 1538               	.L170:
 1539 001e 2F3F      		cpi r18,lo8(-1)
 1540 0020 01F4      		brne .L171
 1541               	.L174:
 1542 0022 81E0      		ldi r24,lo8(1)
 1543               	.L169:
 1544               	.LBE9:
 1545               	.LBE8:
  79:../../tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1546               		.loc 1 79 0
 1547 0024 8111      		cpse r24,__zero_reg__
 1548 0026 00C0      		rjmp .L168
  81:../../tmk_core/common/action.c ****     if(!process_record_quantum(record))
 1549               		.loc 1 81 0
 1550 0028 CE01      		movw r24,r28
 1551 002a 0E94 0000 		call process_record_quantum
 1552               	.LVL210:
 1553 002e 8823      		tst r24
 1554 0030 01F0      		breq .L168
  84:../../tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1555               		.loc 1 84 0
 1556 0032 6881      		ld r22,Y
 1557 0034 7981      		ldd r23,Y+1
 1558 0036 8A81      		ldd r24,Y+2
 1559 0038 0E94 0000 		call store_or_get_action
 1560               	.LVL211:
 1561 003c 8C01      		movw r16,r24
 1562               	.LVL212:
  87:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 1563               		.loc 1 87 0
 1564 003e 0E94 0000 		call layer_debug
 1565               	.LVL213:
  88:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1566               		.loc 1 88 0
 1567 0042 0E94 0000 		call default_layer_debug
 1568               	.LVL214:
  92:../../tmk_core/common/action.c ****     process_action(record, action);
 1569               		.loc 1 92 0
 1570 0046 B801      		movw r22,r16
 1571               	.LVL215:
 1572 0048 CE01      		movw r24,r28
 1573 004a 0E94 0000 		call process_action
 1574               	.LVL216:
 1575               	.L168:
 1576               	/* epilogue start */
  93:../../tmk_core/common/action.c **** }
 1577               		.loc 1 93 0
 1578 004e DF91      		pop r29
 1579 0050 CF91      		pop r28
 1580               	.LVL217:
 1581 0052 1F91      		pop r17
 1582 0054 0F91      		pop r16
 1583               	.LVL218:
 1584 0056 0895      		ret
 1585               		.cfi_endproc
 1586               	.LFE106:
 1588               		.section	.text.process_record_nocache,"ax",@progbits
 1589               	.global	process_record_nocache
 1591               	process_record_nocache:
 1592               	.LFB104:
  67:../../tmk_core/common/action.c **** {
 1593               		.loc 1 67 0
 1594               		.cfi_startproc
 1595               	.LVL219:
 1596               	/* prologue: function */
 1597               	/* frame size = 0 */
 1598               	/* stack size = 0 */
 1599               	.L__stack_usage = 0
  68:../../tmk_core/common/action.c ****     process_record(record);
 1600               		.loc 1 68 0
 1601 0000 0C94 0000 		jmp process_record
 1602               	.LVL220:
 1603               		.cfi_endproc
 1604               	.LFE104:
 1606               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1607               	.global	clear_keyboard_but_mods
 1609               	clear_keyboard_but_mods:
 1610               	.LFB113:
 614:../../tmk_core/common/action.c ****     }
 615:../../tmk_core/common/action.c **** }
 616:../../tmk_core/common/action.c **** 
 617:../../tmk_core/common/action.c **** void clear_keyboard(void)
 618:../../tmk_core/common/action.c **** {
 619:../../tmk_core/common/action.c ****     clear_mods();
 620:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 621:../../tmk_core/common/action.c **** }
 622:../../tmk_core/common/action.c **** 
 623:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 624:../../tmk_core/common/action.c **** {
 1611               		.loc 1 624 0
 1612               		.cfi_startproc
 1613               	/* prologue: function */
 1614               	/* frame size = 0 */
 1615               	/* stack size = 0 */
 1616               	.L__stack_usage = 0
 625:../../tmk_core/common/action.c ****     clear_weak_mods();
 1617               		.loc 1 625 0
 1618 0000 0E94 0000 		call clear_weak_mods
 1619               	.LVL221:
 626:../../tmk_core/common/action.c ****     clear_macro_mods();
 1620               		.loc 1 626 0
 1621 0004 0E94 0000 		call clear_macro_mods
 1622               	.LVL222:
 627:../../tmk_core/common/action.c ****     clear_keys();
 1623               		.loc 1 627 0
 1624 0008 0E94 0000 		call clear_keys
 1625               	.LVL223:
 628:../../tmk_core/common/action.c ****     send_keyboard_report();
 1626               		.loc 1 628 0
 1627 000c 0C94 0000 		jmp send_keyboard_report
 1628               	.LVL224:
 1629               		.cfi_endproc
 1630               	.LFE113:
 1632               		.section	.text.clear_keyboard,"ax",@progbits
 1633               	.global	clear_keyboard
 1635               	clear_keyboard:
 1636               	.LFB112:
 618:../../tmk_core/common/action.c **** {
 1637               		.loc 1 618 0
 1638               		.cfi_startproc
 1639               	/* prologue: function */
 1640               	/* frame size = 0 */
 1641               	/* stack size = 0 */
 1642               	.L__stack_usage = 0
 619:../../tmk_core/common/action.c ****     clear_mods();
 1643               		.loc 1 619 0
 1644 0000 0E94 0000 		call clear_mods
 1645               	.LVL225:
 620:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1646               		.loc 1 620 0
 1647 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1648               	.LVL226:
 1649               		.cfi_endproc
 1650               	.LFE112:
 1652               		.section	.text.is_tap_key,"ax",@progbits
 1653               	.global	is_tap_key
 1655               	is_tap_key:
 1656               	.LFB114:
 629:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 630:../../tmk_core/common/action.c ****     mousekey_clear();
 631:../../tmk_core/common/action.c ****     mousekey_send();
 632:../../tmk_core/common/action.c **** #endif
 633:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 634:../../tmk_core/common/action.c ****     host_system_send(0);
 635:../../tmk_core/common/action.c ****     host_consumer_send(0);
 636:../../tmk_core/common/action.c **** #endif
 637:../../tmk_core/common/action.c **** }
 638:../../tmk_core/common/action.c **** 
 639:../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 640:../../tmk_core/common/action.c **** {
 1657               		.loc 1 640 0
 1658               		.cfi_startproc
 1659               	.LVL227:
 1660               	/* prologue: function */
 1661               	/* frame size = 0 */
 1662               	/* stack size = 0 */
 1663               	.L__stack_usage = 0
 641:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1664               		.loc 1 641 0
 1665 0000 0E94 0000 		call layer_switch_get_action
 1666               	.LVL228:
 642:../../tmk_core/common/action.c **** 
 643:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1667               		.loc 1 643 0
 1668 0004 292F      		mov r18,r25
 1669 0006 2295      		swap r18
 1670 0008 2F70      		andi r18,lo8(15)
 1671 000a 30E0      		ldi r19,0
 1672 000c 2C30      		cpi r18,12
 1673 000e 3105      		cpc r19,__zero_reg__
 1674 0010 04F4      		brge .L183
 1675 0012 2A30      		cpi r18,10
 1676 0014 3105      		cpc r19,__zero_reg__
 1677 0016 04F4      		brge .L184
 1678 0018 2250      		subi r18,2
 1679 001a 3109      		sbc r19,__zero_reg__
 1680 001c 2230      		cpi r18,2
 1681 001e 3105      		cpc r19,__zero_reg__
 1682 0020 00F4      		brsh .L189
 1683 0022 00C0      		rjmp .L184
 1684               	.L183:
 1685 0024 2C30      		cpi r18,12
 1686 0026 3105      		cpc r19,__zero_reg__
 1687 0028 01F0      		breq .L185
 1688 002a 2F30      		cpi r18,15
 1689 002c 3105      		cpc r19,__zero_reg__
 1690 002e 01F0      		breq .L185
 1691 0030 00C0      		rjmp .L189
 1692               	.L184:
 644:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 645:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 646:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 647:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 648:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1693               		.loc 1 648 0
 1694 0032 803F      		cpi r24,lo8(-16)
 1695 0034 01F0      		breq .L186
 1696               	.LVL229:
 1697 0036 00F4      		brsh .L187
 1698 0038 803E      		cpi r24,lo8(-32)
 1699 003a 00F4      		brsh .L189
 1700 003c 00C0      		rjmp .L186
 1701               	.L187:
 1702 003e 843F      		cpi r24,lo8(-12)
 1703 0040 01F4      		brne .L189
 1704               	.L186:
 649:../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 650:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 651:../../tmk_core/common/action.c ****                 case OP_ONESHOT:
 652:../../tmk_core/common/action.c ****                     return true;
 1705               		.loc 1 652 0
 1706 0042 81E0      		ldi r24,lo8(1)
 1707               	.LVL230:
 1708 0044 0895      		ret
 1709               	.L185:
 653:../../tmk_core/common/action.c ****             }
 654:../../tmk_core/common/action.c ****             return false;
 655:../../tmk_core/common/action.c ****         case ACT_MACRO:
 656:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 657:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1710               		.loc 1 657 0
 1711 0046 93FB      		bst r25,3
 1712 0048 8827      		clr r24
 1713 004a 80F9      		bld r24,0
 1714 004c 0895      		ret
 1715               	.LVL231:
 1716               	.L189:
 654:../../tmk_core/common/action.c ****             return false;
 1717               		.loc 1 654 0
 1718 004e 80E0      		ldi r24,0
 1719               	.LVL232:
 658:../../tmk_core/common/action.c ****             return false;
 659:../../tmk_core/common/action.c ****     }
 660:../../tmk_core/common/action.c ****     return false;
 661:../../tmk_core/common/action.c **** }
 1720               		.loc 1 661 0
 1721 0050 0895      		ret
 1722               		.cfi_endproc
 1723               	.LFE114:
 1725               		.section	.text.debug_event,"ax",@progbits
 1726               	.global	debug_event
 1728               	debug_event:
 1729               	.LFB115:
 662:../../tmk_core/common/action.c **** 
 663:../../tmk_core/common/action.c **** 
 664:../../tmk_core/common/action.c **** /*
 665:../../tmk_core/common/action.c ****  * debug print
 666:../../tmk_core/common/action.c ****  */
 667:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 668:../../tmk_core/common/action.c **** {
 1730               		.loc 1 668 0
 1731               		.cfi_startproc
 1732 0000 CF93      		push r28
 1733               	.LCFI22:
 1734               		.cfi_def_cfa_offset 3
 1735               		.cfi_offset 28, -2
 1736 0002 DF93      		push r29
 1737               	.LCFI23:
 1738               		.cfi_def_cfa_offset 4
 1739               		.cfi_offset 29, -3
 1740 0004 00D0      		rcall .
 1741 0006 00D0      		rcall .
 1742 0008 1F92      		push __zero_reg__
 1743               	.LCFI24:
 1744               		.cfi_def_cfa_offset 9
 1745 000a CDB7      		in r28,__SP_L__
 1746 000c DEB7      		in r29,__SP_H__
 1747               	.LCFI25:
 1748               		.cfi_def_cfa_register 28
 1749               	/* prologue: function */
 1750               	/* frame size = 5 */
 1751               	/* stack size = 7 */
 1752               	.L__stack_usage = 7
 1753               	/* epilogue start */
 669:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 670:../../tmk_core/common/action.c **** }
 1754               		.loc 1 670 0
 1755 000e 0F90      		pop __tmp_reg__
 1756 0010 0F90      		pop __tmp_reg__
 1757 0012 0F90      		pop __tmp_reg__
 1758 0014 0F90      		pop __tmp_reg__
 1759 0016 0F90      		pop __tmp_reg__
 1760 0018 DF91      		pop r29
 1761 001a CF91      		pop r28
 1762 001c 0895      		ret
 1763               		.cfi_endproc
 1764               	.LFE115:
 1766               		.section	.text.debug_record,"ax",@progbits
 1767               	.global	debug_record
 1769               	debug_record:
 1770               	.LFB116:
 671:../../tmk_core/common/action.c **** 
 672:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 673:../../tmk_core/common/action.c **** {
 1771               		.loc 1 673 0
 1772               		.cfi_startproc
 1773 0000 CF93      		push r28
 1774               	.LCFI26:
 1775               		.cfi_def_cfa_offset 3
 1776               		.cfi_offset 28, -2
 1777 0002 DF93      		push r29
 1778               	.LCFI27:
 1779               		.cfi_def_cfa_offset 4
 1780               		.cfi_offset 29, -3
 1781 0004 00D0      		rcall .
 1782 0006 00D0      		rcall .
 1783 0008 00D0      		rcall .
 1784               	.LCFI28:
 1785               		.cfi_def_cfa_offset 10
 1786 000a CDB7      		in r28,__SP_L__
 1787 000c DEB7      		in r29,__SP_H__
 1788               	.LCFI29:
 1789               		.cfi_def_cfa_register 28
 1790               	/* prologue: function */
 1791               	/* frame size = 6 */
 1792               	/* stack size = 8 */
 1793               	.L__stack_usage = 8
 1794               	/* epilogue start */
 674:../../tmk_core/common/action.c ****     debug_event(record.event);
 675:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 676:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 677:../../tmk_core/common/action.c **** #endif
 678:../../tmk_core/common/action.c **** }
 1795               		.loc 1 678 0
 1796 000e 2696      		adiw r28,6
 1797 0010 0FB6      		in __tmp_reg__,__SREG__
 1798 0012 F894      		cli
 1799 0014 DEBF      		out __SP_H__,r29
 1800 0016 0FBE      		out __SREG__,__tmp_reg__
 1801 0018 CDBF      		out __SP_L__,r28
 1802 001a DF91      		pop r29
 1803 001c CF91      		pop r28
 1804 001e 0895      		ret
 1805               		.cfi_endproc
 1806               	.LFE116:
 1808               		.section	.text.debug_action,"ax",@progbits
 1809               	.global	debug_action
 1811               	debug_action:
 1812               	.LFB117:
 679:../../tmk_core/common/action.c **** 
 680:../../tmk_core/common/action.c **** void debug_action(action_t action)
 681:../../tmk_core/common/action.c **** {
 1813               		.loc 1 681 0
 1814               		.cfi_startproc
 1815               	.LVL233:
 1816               	/* prologue: function */
 1817               	/* frame size = 0 */
 1818               	/* stack size = 0 */
 1819               	.L__stack_usage = 0
 1820 0000 0895      		ret
 1821               		.cfi_endproc
 1822               	.LFE117:
 1824               		.text
 1825               	.Letext0:
 1826               		.file 3 "/usr/lib/avr/include/stdint.h"
 1827               		.file 4 "../../tmk_core/common/keycode.h"
 1828               		.file 5 "../../tmk_core/common/action_code.h"
 1829               		.file 6 "../../tmk_core/common/action_macro.h"
 1830               		.file 7 "../../tmk_core/common/action.h"
 1831               		.file 8 "../../tmk_core/common/action_util.h"
 1832               		.file 9 "../../tmk_core/common/action_tapping.h"
 1833               		.file 10 "../../tmk_core/common/host.h"
 1834               		.file 11 "../../tmk_core/common/action_layer.h"
 1835               		.file 12 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccVSr3Ls.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVSr3Ls.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVSr3Ls.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVSr3Ls.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVSr3Ls.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVSr3Ls.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccVSr3Ls.s:93     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccVSr3Ls.s:112    .text.register_code:0000000000000000 register_code
     /tmp/ccVSr3Ls.s:466    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccVSr3Ls.s:601    .text.register_mods:0000000000000000 register_mods
     /tmp/ccVSr3Ls.s:627    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccVSr3Ls.s:653    .text.process_action:0000000000000000 process_action
     /tmp/ccVSr3Ls.s:1495   .text.process_record:0000000000000000 process_record
     /tmp/ccVSr3Ls.s:1591   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/ccVSr3Ls.s:1609   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccVSr3Ls.s:1635   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccVSr3Ls.s:1655   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccVSr3Ls.s:1728   .text.debug_event:0000000000000000 debug_event
     /tmp/ccVSr3Ls.s:1769   .text.debug_record:0000000000000000 debug_record
     /tmp/ccVSr3Ls.s:1811   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
get_oneshot_layer_state
get_oneshot_layer
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
clear_mods
layer_switch_get_action

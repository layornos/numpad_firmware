   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB111:
  14               		.file 1 "../../tmk_core/protocol/lufa/lufa.c"
   1:../../tmk_core/protocol/lufa/lufa.c **** /*
   2:../../tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:../../tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../tmk_core/protocol/lufa/lufa.c ****  */
   7:../../tmk_core/protocol/lufa/lufa.c **** 
   8:../../tmk_core/protocol/lufa/lufa.c **** /*
   9:../../tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:../../tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:../../tmk_core/protocol/lufa/lufa.c **** 
  12:../../tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:../../tmk_core/protocol/lufa/lufa.c **** */
  15:../../tmk_core/protocol/lufa/lufa.c **** 
  16:../../tmk_core/protocol/lufa/lufa.c **** /*
  17:../../tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../tmk_core/protocol/lufa/lufa.c **** 
  20:../../tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:../../tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:../../tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:../../tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:../../tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:../../tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:../../tmk_core/protocol/lufa/lufa.c **** 
  29:../../tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:../../tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:../../tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:../../tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:../../tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:../../tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:../../tmk_core/protocol/lufa/lufa.c ****   this software.
  37:../../tmk_core/protocol/lufa/lufa.c **** */
  38:../../tmk_core/protocol/lufa/lufa.c **** 
  39:../../tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:../../tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:../../tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:../../tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:../../tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:../../tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:../../tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:../../tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:../../tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:../../tmk_core/protocol/lufa/lufa.c **** #endif
  50:../../tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:../../tmk_core/protocol/lufa/lufa.c **** 
  52:../../tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:../../tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:../../tmk_core/protocol/lufa/lufa.c **** 
  55:../../tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  56:../../tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  57:../../tmk_core/protocol/lufa/lufa.c **** #endif
  58:../../tmk_core/protocol/lufa/lufa.c **** 
  59:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  60:../../tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  61:../../tmk_core/protocol/lufa/lufa.c **** #endif
  62:../../tmk_core/protocol/lufa/lufa.c **** 
  63:../../tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  64:../../tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  65:../../tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  66:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  67:../../tmk_core/protocol/lufa/lufa.c **** 
  68:../../tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  69:../../tmk_core/protocol/lufa/lufa.c **** 
  70:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  71:../../tmk_core/protocol/lufa/lufa.c **** void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
  72:../../tmk_core/protocol/lufa/lufa.c **** void usb_get_midi(MidiDevice * device);
  73:../../tmk_core/protocol/lufa/lufa.c **** void midi_usb_init(MidiDevice * device);
  74:../../tmk_core/protocol/lufa/lufa.c **** #endif
  75:../../tmk_core/protocol/lufa/lufa.c **** 
  76:../../tmk_core/protocol/lufa/lufa.c **** /* Host driver */
  77:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
  78:../../tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
  79:../../tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
  80:../../tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
  81:../../tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
  82:../../tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
  83:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
  84:../../tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
  85:../../tmk_core/protocol/lufa/lufa.c ****     send_mouse,
  86:../../tmk_core/protocol/lufa/lufa.c ****     send_system,
  87:../../tmk_core/protocol/lufa/lufa.c ****     send_consumer,
  88:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  89:../../tmk_core/protocol/lufa/lufa.c ****     usb_send_func,
  90:../../tmk_core/protocol/lufa/lufa.c ****     usb_get_midi,
  91:../../tmk_core/protocol/lufa/lufa.c ****     midi_usb_init
  92:../../tmk_core/protocol/lufa/lufa.c **** #endif
  93:../../tmk_core/protocol/lufa/lufa.c **** };
  94:../../tmk_core/protocol/lufa/lufa.c **** 
  95:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
  96:../../tmk_core/protocol/lufa/lufa.c ****  * MIDI
  97:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
  98:../../tmk_core/protocol/lufa/lufa.c **** 
  99:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 100:../../tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 101:../../tmk_core/protocol/lufa/lufa.c **** {
 102:../../tmk_core/protocol/lufa/lufa.c ****   .Config =
 103:../../tmk_core/protocol/lufa/lufa.c ****   {
 104:../../tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 105:../../tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 106:../../tmk_core/protocol/lufa/lufa.c ****     {
 107:../../tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 108:../../tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 109:../../tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 110:../../tmk_core/protocol/lufa/lufa.c ****     },
 111:../../tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 112:../../tmk_core/protocol/lufa/lufa.c ****     {
 113:../../tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 114:../../tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 115:../../tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 116:../../tmk_core/protocol/lufa/lufa.c ****     },
 117:../../tmk_core/protocol/lufa/lufa.c ****   },
 118:../../tmk_core/protocol/lufa/lufa.c **** };
 119:../../tmk_core/protocol/lufa/lufa.c **** 
 120:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_START_OR_CONT 0x40
 121:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_1 0x50
 122:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_2 0x60
 123:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_3 0x70
 124:../../tmk_core/protocol/lufa/lufa.c **** 
 125:../../tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_1 0x50
 126:../../tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_2 0x20
 127:../../tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_3 0x30
 128:../../tmk_core/protocol/lufa/lufa.c **** #endif
 129:../../tmk_core/protocol/lufa/lufa.c **** 
 130:../../tmk_core/protocol/lufa/lufa.c **** 
 131:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 132:../../tmk_core/protocol/lufa/lufa.c ****  * Console
 133:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 134:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 135:../../tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 136:../../tmk_core/protocol/lufa/lufa.c **** {
 137:../../tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 138:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 139:../../tmk_core/protocol/lufa/lufa.c ****         return;
 140:../../tmk_core/protocol/lufa/lufa.c **** 
 141:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 142:../../tmk_core/protocol/lufa/lufa.c **** 
 143:../../tmk_core/protocol/lufa/lufa.c **** #if 0
 144:../../tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 145:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 146:../../tmk_core/protocol/lufa/lufa.c **** 
 147:../../tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 148:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 149:../../tmk_core/protocol/lufa/lufa.c ****     {
 150:../../tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 151:../../tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 152:../../tmk_core/protocol/lufa/lufa.c ****         {
 153:../../tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 154:../../tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 155:../../tmk_core/protocol/lufa/lufa.c **** 
 156:../../tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 157:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 158:../../tmk_core/protocol/lufa/lufa.c **** 
 159:../../tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 160:../../tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 161:../../tmk_core/protocol/lufa/lufa.c ****         }
 162:../../tmk_core/protocol/lufa/lufa.c **** 
 163:../../tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 164:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 165:../../tmk_core/protocol/lufa/lufa.c ****     }
 166:../../tmk_core/protocol/lufa/lufa.c **** #endif
 167:../../tmk_core/protocol/lufa/lufa.c **** 
 168:../../tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 169:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 170:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 171:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 172:../../tmk_core/protocol/lufa/lufa.c ****         return;
 173:../../tmk_core/protocol/lufa/lufa.c ****     }
 174:../../tmk_core/protocol/lufa/lufa.c **** 
 175:../../tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 176:../../tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 177:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 178:../../tmk_core/protocol/lufa/lufa.c **** 
 179:../../tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 180:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 181:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 182:../../tmk_core/protocol/lufa/lufa.c ****     }
 183:../../tmk_core/protocol/lufa/lufa.c **** 
 184:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 185:../../tmk_core/protocol/lufa/lufa.c **** }
 186:../../tmk_core/protocol/lufa/lufa.c **** #endif
 187:../../tmk_core/protocol/lufa/lufa.c **** 
 188:../../tmk_core/protocol/lufa/lufa.c **** 
 189:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 190:../../tmk_core/protocol/lufa/lufa.c ****  * USB Events
 191:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 192:../../tmk_core/protocol/lufa/lufa.c **** /*
 193:../../tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 194:../../tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 195:../../tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 196:../../tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 197:../../tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 198:../../tmk_core/protocol/lufa/lufa.c **** */
 199:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 200:../../tmk_core/protocol/lufa/lufa.c **** {
 201:../../tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 202:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 203:../../tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 204:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 205:../../tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 206:../../tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 207:../../tmk_core/protocol/lufa/lufa.c ****     }
 208:../../tmk_core/protocol/lufa/lufa.c **** }
 209:../../tmk_core/protocol/lufa/lufa.c **** 
 210:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 211:../../tmk_core/protocol/lufa/lufa.c **** {
 212:../../tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 213:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 214:../../tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 215:../../tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 216:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 217:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 218:../../tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 219:../../tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 220:../../tmk_core/protocol/lufa/lufa.c ****     }
 221:../../tmk_core/protocol/lufa/lufa.c **** */
 222:../../tmk_core/protocol/lufa/lufa.c **** }
 223:../../tmk_core/protocol/lufa/lufa.c **** 
 224:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 225:../../tmk_core/protocol/lufa/lufa.c **** {
 226:../../tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 227:../../tmk_core/protocol/lufa/lufa.c **** }
 228:../../tmk_core/protocol/lufa/lufa.c **** 
 229:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 230:../../tmk_core/protocol/lufa/lufa.c **** {
 231:../../tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 232:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 233:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 234:../../tmk_core/protocol/lufa/lufa.c **** #endif
 235:../../tmk_core/protocol/lufa/lufa.c **** }
 236:../../tmk_core/protocol/lufa/lufa.c **** 
 237:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 238:../../tmk_core/protocol/lufa/lufa.c **** {
 239:../../tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 240:../../tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 241:../../tmk_core/protocol/lufa/lufa.c **** 
 242:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 243:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 244:../../tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 245:../../tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 246:../../tmk_core/protocol/lufa/lufa.c **** #endif
 247:../../tmk_core/protocol/lufa/lufa.c **** }
 248:../../tmk_core/protocol/lufa/lufa.c **** 
 249:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 250:../../tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 251:../../tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 252:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t sreg = SREG; cli(); console_flush = b; SREG = sreg; \
 253:../../tmk_core/protocol/lufa/lufa.c **** } while (0)
 254:../../tmk_core/protocol/lufa/lufa.c **** 
 255:../../tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 256:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 257:../../tmk_core/protocol/lufa/lufa.c **** {
 258:../../tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 259:../../tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 260:../../tmk_core/protocol/lufa/lufa.c ****     count = 0;
 261:../../tmk_core/protocol/lufa/lufa.c **** 
 262:../../tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 263:../../tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 264:../../tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 265:../../tmk_core/protocol/lufa/lufa.c **** }
 266:../../tmk_core/protocol/lufa/lufa.c **** #endif
 267:../../tmk_core/protocol/lufa/lufa.c **** 
 268:../../tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 269:../../tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 270:../../tmk_core/protocol/lufa/lufa.c ****  *
 271:../../tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 272:../../tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 273:../../tmk_core/protocol/lufa/lufa.c ****  */
 274:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 275:../../tmk_core/protocol/lufa/lufa.c **** {
 276:../../tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 277:../../tmk_core/protocol/lufa/lufa.c **** 
 278:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 279:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 280:../../tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 281:../../tmk_core/protocol/lufa/lufa.c **** 
 282:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 283:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 284:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 285:../../tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 286:../../tmk_core/protocol/lufa/lufa.c **** #endif
 287:../../tmk_core/protocol/lufa/lufa.c **** 
 288:../../tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 289:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 290:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 291:../../tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 292:../../tmk_core/protocol/lufa/lufa.c **** #endif
 293:../../tmk_core/protocol/lufa/lufa.c **** 
 294:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 295:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 296:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 297:../../tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 298:../../tmk_core/protocol/lufa/lufa.c **** #if 0
 299:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 300:../../tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 301:../../tmk_core/protocol/lufa/lufa.c **** #endif
 302:../../tmk_core/protocol/lufa/lufa.c **** #endif
 303:../../tmk_core/protocol/lufa/lufa.c **** 
 304:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 305:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 306:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 307:../../tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 308:../../tmk_core/protocol/lufa/lufa.c **** #endif
 309:../../tmk_core/protocol/lufa/lufa.c **** 
 310:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 311:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 312:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 313:../../tmk_core/protocol/lufa/lufa.c **** #endif
 314:../../tmk_core/protocol/lufa/lufa.c **** }
 315:../../tmk_core/protocol/lufa/lufa.c **** 
 316:../../tmk_core/protocol/lufa/lufa.c **** /*
 317:../../tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 318:../../tmk_core/protocol/lufa/lufa.c **** 
 319:../../tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 320:../../tmk_core/protocol/lufa/lufa.c **** 
 321:../../tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 322:../../tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 323:../../tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 324:../../tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 325:../../tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 326:../../tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 327:../../tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 328:../../tmk_core/protocol/lufa/lufa.c **** */
 329:../../tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 330:../../tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 331:../../tmk_core/protocol/lufa/lufa.c ****  */
 332:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 333:../../tmk_core/protocol/lufa/lufa.c **** {
 334:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 335:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 336:../../tmk_core/protocol/lufa/lufa.c **** 
 337:../../tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 338:../../tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 339:../../tmk_core/protocol/lufa/lufa.c ****     {
 340:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 341:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 342:../../tmk_core/protocol/lufa/lufa.c ****             {
 343:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 344:../../tmk_core/protocol/lufa/lufa.c **** 
 345:../../tmk_core/protocol/lufa/lufa.c ****                 // Interface
 346:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 347:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 348:../../tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 349:../../tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 350:../../tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 351:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 352:../../tmk_core/protocol/lufa/lufa.c ****                 }
 353:../../tmk_core/protocol/lufa/lufa.c **** 
 354:../../tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 355:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 356:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 357:../../tmk_core/protocol/lufa/lufa.c ****             }
 358:../../tmk_core/protocol/lufa/lufa.c **** 
 359:../../tmk_core/protocol/lufa/lufa.c ****             break;
 360:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 361:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 362:../../tmk_core/protocol/lufa/lufa.c ****             {
 363:../../tmk_core/protocol/lufa/lufa.c **** 
 364:../../tmk_core/protocol/lufa/lufa.c ****                 // Interface
 365:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 366:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 367:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 368:../../tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 369:../../tmk_core/protocol/lufa/lufa.c **** #endif
 370:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 371:../../tmk_core/protocol/lufa/lufa.c **** 
 372:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 373:../../tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 374:../../tmk_core/protocol/lufa/lufa.c ****                           return;
 375:../../tmk_core/protocol/lufa/lufa.c ****                     }
 376:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 377:../../tmk_core/protocol/lufa/lufa.c **** 
 378:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 379:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 380:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 381:../../tmk_core/protocol/lufa/lufa.c ****                 }
 382:../../tmk_core/protocol/lufa/lufa.c **** 
 383:../../tmk_core/protocol/lufa/lufa.c ****             }
 384:../../tmk_core/protocol/lufa/lufa.c **** 
 385:../../tmk_core/protocol/lufa/lufa.c ****             break;
 386:../../tmk_core/protocol/lufa/lufa.c **** 
 387:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 388:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 389:../../tmk_core/protocol/lufa/lufa.c ****             {
 390:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 391:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 392:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 393:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 394:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 395:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 396:../../tmk_core/protocol/lufa/lufa.c ****                 }
 397:../../tmk_core/protocol/lufa/lufa.c ****             }
 398:../../tmk_core/protocol/lufa/lufa.c **** 
 399:../../tmk_core/protocol/lufa/lufa.c ****             break;
 400:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 401:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 402:../../tmk_core/protocol/lufa/lufa.c ****             {
 403:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 404:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 405:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 406:../../tmk_core/protocol/lufa/lufa.c **** 
 407:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 408:../../tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 409:../../tmk_core/protocol/lufa/lufa.c ****                 }
 410:../../tmk_core/protocol/lufa/lufa.c ****             }
 411:../../tmk_core/protocol/lufa/lufa.c **** 
 412:../../tmk_core/protocol/lufa/lufa.c ****             break;
 413:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 414:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 415:../../tmk_core/protocol/lufa/lufa.c ****             {
 416:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 417:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 418:../../tmk_core/protocol/lufa/lufa.c **** 
 419:../../tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 420:../../tmk_core/protocol/lufa/lufa.c ****             }
 421:../../tmk_core/protocol/lufa/lufa.c **** 
 422:../../tmk_core/protocol/lufa/lufa.c ****             break;
 423:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 424:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 425:../../tmk_core/protocol/lufa/lufa.c ****             {
 426:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 427:../../tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 428:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 429:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 430:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 431:../../tmk_core/protocol/lufa/lufa.c ****             }
 432:../../tmk_core/protocol/lufa/lufa.c **** 
 433:../../tmk_core/protocol/lufa/lufa.c ****             break;
 434:../../tmk_core/protocol/lufa/lufa.c ****     }
 435:../../tmk_core/protocol/lufa/lufa.c **** }
 436:../../tmk_core/protocol/lufa/lufa.c **** 
 437:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 438:../../tmk_core/protocol/lufa/lufa.c ****  * Host driver
 439:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 440:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 441:../../tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 441 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 442:../../tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 443:../../tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 443 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE111:
  27               		.section	.text.send_mouse,"ax",@progbits
  29               	send_mouse:
  30               	.LFB113:
 444:../../tmk_core/protocol/lufa/lufa.c **** 
 445:../../tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 446:../../tmk_core/protocol/lufa/lufa.c **** {
 447:../../tmk_core/protocol/lufa/lufa.c **** 
 448:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 449:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 450:../../tmk_core/protocol/lufa/lufa.c ****     for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 451:../../tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 452:../../tmk_core/protocol/lufa/lufa.c ****     }
 453:../../tmk_core/protocol/lufa/lufa.c **** #endif
 454:../../tmk_core/protocol/lufa/lufa.c **** 
 455:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 456:../../tmk_core/protocol/lufa/lufa.c **** 
 457:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 458:../../tmk_core/protocol/lufa/lufa.c ****         return;
 459:../../tmk_core/protocol/lufa/lufa.c **** 
 460:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 461:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 462:../../tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keyboard_nkro) {
 463:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 464:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 465:../../tmk_core/protocol/lufa/lufa.c **** 
 466:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 467:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 468:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 469:../../tmk_core/protocol/lufa/lufa.c **** 
 470:../../tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 471:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 472:../../tmk_core/protocol/lufa/lufa.c ****     }
 473:../../tmk_core/protocol/lufa/lufa.c ****     else
 474:../../tmk_core/protocol/lufa/lufa.c **** #endif
 475:../../tmk_core/protocol/lufa/lufa.c ****     {
 476:../../tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 477:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 478:../../tmk_core/protocol/lufa/lufa.c **** 
 479:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 480:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 481:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 482:../../tmk_core/protocol/lufa/lufa.c **** 
 483:../../tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 484:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 485:../../tmk_core/protocol/lufa/lufa.c ****     }
 486:../../tmk_core/protocol/lufa/lufa.c **** 
 487:../../tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 488:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 489:../../tmk_core/protocol/lufa/lufa.c **** 
 490:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 491:../../tmk_core/protocol/lufa/lufa.c **** }
 492:../../tmk_core/protocol/lufa/lufa.c **** 
 493:../../tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 494:../../tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 494 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE113:
  42               		.section	.text.send_consumer,"ax",@progbits
  44               	send_consumer:
  45               	.LFB115:
 495:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 496:../../tmk_core/protocol/lufa/lufa.c **** 
 497:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 498:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 499:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 500:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x03);
 501:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->buttons);
 502:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->x);
 503:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->y);
 504:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->v); // should try sending the wheel v here
 505:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->h); // should try sending the wheel h here
 506:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 507:../../tmk_core/protocol/lufa/lufa.c **** #endif
 508:../../tmk_core/protocol/lufa/lufa.c **** 
 509:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 510:../../tmk_core/protocol/lufa/lufa.c **** 
 511:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 512:../../tmk_core/protocol/lufa/lufa.c ****         return;
 513:../../tmk_core/protocol/lufa/lufa.c **** 
 514:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 515:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 516:../../tmk_core/protocol/lufa/lufa.c **** 
 517:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 518:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 519:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 520:../../tmk_core/protocol/lufa/lufa.c **** 
 521:../../tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 522:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 523:../../tmk_core/protocol/lufa/lufa.c **** 
 524:../../tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 525:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 526:../../tmk_core/protocol/lufa/lufa.c **** #endif
 527:../../tmk_core/protocol/lufa/lufa.c **** }
 528:../../tmk_core/protocol/lufa/lufa.c **** 
 529:../../tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 530:../../tmk_core/protocol/lufa/lufa.c **** {
 531:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 532:../../tmk_core/protocol/lufa/lufa.c **** 
 533:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 534:../../tmk_core/protocol/lufa/lufa.c ****         return;
 535:../../tmk_core/protocol/lufa/lufa.c **** 
 536:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 537:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 538:../../tmk_core/protocol/lufa/lufa.c ****         .usage = data
 539:../../tmk_core/protocol/lufa/lufa.c ****     };
 540:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 541:../../tmk_core/protocol/lufa/lufa.c **** 
 542:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 543:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 544:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 545:../../tmk_core/protocol/lufa/lufa.c **** 
 546:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 547:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 548:../../tmk_core/protocol/lufa/lufa.c **** }
 549:../../tmk_core/protocol/lufa/lufa.c **** 
 550:../../tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 551:../../tmk_core/protocol/lufa/lufa.c **** {
  46               		.loc 1 551 0
  47               		.cfi_startproc
  48               	.LVL1:
  49               		.loc 1 551 0
  50 0000 CF93      		push r28
  51               	.LCFI0:
  52               		.cfi_def_cfa_offset 3
  53               		.cfi_offset 28, -2
  54 0002 DF93      		push r29
  55               	.LCFI1:
  56               		.cfi_def_cfa_offset 4
  57               		.cfi_offset 29, -3
  58 0004 00D0      		rcall .
  59 0006 1F92      		push __zero_reg__
  60               	.LCFI2:
  61               		.cfi_def_cfa_offset 7
  62 0008 CDB7      		in r28,__SP_L__
  63 000a DEB7      		in r29,__SP_H__
  64               	.LCFI3:
  65               		.cfi_def_cfa_register 28
  66               	/* prologue: function */
  67               	/* frame size = 3 */
  68               	/* stack size = 5 */
  69               	.L__stack_usage = 5
  70               	.LVL2:
 552:../../tmk_core/protocol/lufa/lufa.c **** 
 553:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 554:../../tmk_core/protocol/lufa/lufa.c ****     static uint16_t last_data = 0;
 555:../../tmk_core/protocol/lufa/lufa.c ****     if (data == last_data) return;
 556:../../tmk_core/protocol/lufa/lufa.c ****     last_data = data;
 557:../../tmk_core/protocol/lufa/lufa.c ****     uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 558:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 559:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 560:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x02);
 561:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send((bitmap>>8)&0xFF);
 562:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(bitmap&0xFF);
 563:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 564:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 565:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 566:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 567:../../tmk_core/protocol/lufa/lufa.c **** #endif
 568:../../tmk_core/protocol/lufa/lufa.c **** 
 569:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 570:../../tmk_core/protocol/lufa/lufa.c **** 
 571:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  71               		.loc 1 571 0
  72 000c 2091 0000 		lds r18,USB_DeviceState
  73 0010 2430      		cpi r18,lo8(4)
  74 0012 01F4      		brne .L3
 572:../../tmk_core/protocol/lufa/lufa.c ****         return;
 573:../../tmk_core/protocol/lufa/lufa.c **** 
 574:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  75               		.loc 1 574 0
  76 0014 23E0      		ldi r18,lo8(3)
  77 0016 2983      		std Y+1,r18
  78 0018 9B83      		std Y+3,r25
  79 001a 8A83      		std Y+2,r24
  80               	.LVL3:
  81               	.LBB92:
  82               	.LBB93:
  83               		.file 2 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  84               		.loc 2 270 0
  85 001c 81E0      		ldi r24,lo8(1)
  86               	.LVL4:
  87 001e 8093 E900 		sts 233,r24
  88               	.LVL5:
  89 0022 8FEF      		ldi r24,lo8(-1)
  90               	.LVL6:
  91               	.L5:
  92               	.LBE93:
  93               	.LBE92:
  94               	.LBB94:
  95               	.LBB95:
 271:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  96               		.loc 2 360 0
  97 0024 9091 E800 		lds r25,232
  98 0028 8150      		subi r24,lo8(-(-1))
  99               	.LVL7:
 100               	.LBE95:
 101               	.LBE94:
 575:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 576:../../tmk_core/protocol/lufa/lufa.c ****         .usage = data
 577:../../tmk_core/protocol/lufa/lufa.c ****     };
 578:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 579:../../tmk_core/protocol/lufa/lufa.c **** 
 580:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 581:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 102               		.loc 1 581 0
 103 002a 95FD      		sbrc r25,5
 104 002c 00C0      		rjmp .L6
 105               	.LVL8:
 106               	.LBB96:
 107               	.LBB97:
 108               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/lib/avr/include/util/delay.h **** 
 166:/usr/lib/avr/include/util/delay.h **** #else
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/avr/include/util/delay.h **** 
 235:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/avr/include/util/delay.h **** 
 238:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h **** 	#else
 242:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/avr/include/util/delay.h **** 	#endif
 245:/usr/lib/avr/include/util/delay.h **** 
 246:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 109               		.loc 3 246 0
 110 002e 95ED      		ldi r25,lo8(-43)
 111 0030 9A95      		1: dec r25
 112 0032 01F4      		brne 1b
 113 0034 0000      		nop
 114               	.LVL9:
 115               	.LBE97:
 116               	.LBE96:
 117               		.loc 1 581 0
 118 0036 8111      		cpse r24,__zero_reg__
 119 0038 00C0      		rjmp .L5
 120               	.LVL10:
 121               	.L6:
 122               	.LBB98:
 123               	.LBB99:
 124               		.loc 2 360 0
 125 003a 8091 E800 		lds r24,232
 126               	.LBE99:
 127               	.LBE98:
 582:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 128               		.loc 1 582 0
 129 003e 85FF      		sbrs r24,5
 130 0040 00C0      		rjmp .L3
 583:../../tmk_core/protocol/lufa/lufa.c **** 
 584:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 131               		.loc 1 584 0
 132 0042 40E0      		ldi r20,0
 133 0044 50E0      		ldi r21,0
 134 0046 63E0      		ldi r22,lo8(3)
 135 0048 70E0      		ldi r23,0
 136 004a CE01      		movw r24,r28
 137 004c 0196      		adiw r24,1
 138 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 139               	.LVL11:
 140               	.LBB100:
 141               	.LBB101:
 361:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 142               		.loc 2 456 0
 143 0052 8091 E800 		lds r24,232
 144 0056 8E77      		andi r24,lo8(126)
 145 0058 8093 E800 		sts 232,r24
 146               	.LVL12:
 147               	.L3:
 148               	/* epilogue start */
 149               	.LBE101:
 150               	.LBE100:
 585:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 586:../../tmk_core/protocol/lufa/lufa.c **** }
 151               		.loc 1 586 0
 152 005c 0F90      		pop __tmp_reg__
 153 005e 0F90      		pop __tmp_reg__
 154 0060 0F90      		pop __tmp_reg__
 155 0062 DF91      		pop r29
 156 0064 CF91      		pop r28
 157 0066 0895      		ret
 158               		.cfi_endproc
 159               	.LFE115:
 161               		.section	.text.send_system,"ax",@progbits
 163               	send_system:
 164               	.LFB114:
 530:../../tmk_core/protocol/lufa/lufa.c **** {
 165               		.loc 1 530 0
 166               		.cfi_startproc
 167               	.LVL13:
 168 0000 CF93      		push r28
 169               	.LCFI4:
 170               		.cfi_def_cfa_offset 3
 171               		.cfi_offset 28, -2
 172 0002 DF93      		push r29
 173               	.LCFI5:
 174               		.cfi_def_cfa_offset 4
 175               		.cfi_offset 29, -3
 176 0004 00D0      		rcall .
 177 0006 1F92      		push __zero_reg__
 178               	.LCFI6:
 179               		.cfi_def_cfa_offset 7
 180 0008 CDB7      		in r28,__SP_L__
 181 000a DEB7      		in r29,__SP_H__
 182               	.LCFI7:
 183               		.cfi_def_cfa_register 28
 184               	/* prologue: function */
 185               	/* frame size = 3 */
 186               	/* stack size = 5 */
 187               	.L__stack_usage = 5
 188               	.LVL14:
 533:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 189               		.loc 1 533 0
 190 000c 2091 0000 		lds r18,USB_DeviceState
 191 0010 2430      		cpi r18,lo8(4)
 192 0012 01F4      		brne .L16
 536:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 193               		.loc 1 536 0
 194 0014 22E0      		ldi r18,lo8(2)
 195 0016 2983      		std Y+1,r18
 196 0018 9B83      		std Y+3,r25
 197 001a 8A83      		std Y+2,r24
 198               	.LVL15:
 199               	.LBB102:
 200               	.LBB103:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 201               		.loc 2 270 0
 202 001c 81E0      		ldi r24,lo8(1)
 203               	.LVL16:
 204 001e 8093 E900 		sts 233,r24
 205               	.LVL17:
 206 0022 8FEF      		ldi r24,lo8(-1)
 207               	.LVL18:
 208               	.L18:
 209               	.LBE103:
 210               	.LBE102:
 211               	.LBB104:
 212               	.LBB105:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 213               		.loc 2 360 0
 214 0024 9091 E800 		lds r25,232
 215 0028 8150      		subi r24,lo8(-(-1))
 216               	.LVL19:
 217               	.LBE105:
 218               	.LBE104:
 543:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 219               		.loc 1 543 0
 220 002a 95FD      		sbrc r25,5
 221 002c 00C0      		rjmp .L19
 222               	.LVL20:
 223               	.LBB106:
 224               	.LBB107:
 225               		.loc 3 246 0
 226 002e 95ED      		ldi r25,lo8(-43)
 227 0030 9A95      		1: dec r25
 228 0032 01F4      		brne 1b
 229 0034 0000      		nop
 230               	.LVL21:
 231               	.LBE107:
 232               	.LBE106:
 543:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 233               		.loc 1 543 0
 234 0036 8111      		cpse r24,__zero_reg__
 235 0038 00C0      		rjmp .L18
 236               	.LVL22:
 237               	.L19:
 238               	.LBB108:
 239               	.LBB109:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 240               		.loc 2 360 0
 241 003a 8091 E800 		lds r24,232
 242               	.LBE109:
 243               	.LBE108:
 544:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 244               		.loc 1 544 0
 245 003e 85FF      		sbrs r24,5
 246 0040 00C0      		rjmp .L16
 546:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 247               		.loc 1 546 0
 248 0042 40E0      		ldi r20,0
 249 0044 50E0      		ldi r21,0
 250 0046 63E0      		ldi r22,lo8(3)
 251 0048 70E0      		ldi r23,0
 252 004a CE01      		movw r24,r28
 253 004c 0196      		adiw r24,1
 254 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 255               	.LVL23:
 256               	.LBB110:
 257               	.LBB111:
 258               		.loc 2 456 0
 259 0052 8091 E800 		lds r24,232
 260 0056 8E77      		andi r24,lo8(126)
 261 0058 8093 E800 		sts 232,r24
 262               	.LVL24:
 263               	.L16:
 264               	/* epilogue start */
 265               	.LBE111:
 266               	.LBE110:
 548:../../tmk_core/protocol/lufa/lufa.c **** }
 267               		.loc 1 548 0
 268 005c 0F90      		pop __tmp_reg__
 269 005e 0F90      		pop __tmp_reg__
 270 0060 0F90      		pop __tmp_reg__
 271 0062 DF91      		pop r29
 272 0064 CF91      		pop r28
 273 0066 0895      		ret
 274               		.cfi_endproc
 275               	.LFE114:
 277               		.section	.text.send_keyboard,"ax",@progbits
 279               	send_keyboard:
 280               	.LFB112:
 446:../../tmk_core/protocol/lufa/lufa.c **** {
 281               		.loc 1 446 0
 282               		.cfi_startproc
 283               	.LVL25:
 284 0000 CF93      		push r28
 285               	.LCFI8:
 286               		.cfi_def_cfa_offset 3
 287               		.cfi_offset 28, -2
 288 0002 DF93      		push r29
 289               	.LCFI9:
 290               		.cfi_def_cfa_offset 4
 291               		.cfi_offset 29, -3
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 2 */
 295               	.L__stack_usage = 2
 296 0004 EC01      		movw r28,r24
 297               	.LVL26:
 457:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 298               		.loc 1 457 0
 299 0006 8091 0000 		lds r24,USB_DeviceState
 300               	.LVL27:
 301 000a 8430      		cpi r24,lo8(4)
 302 000c 01F0      		breq .+2
 303 000e 00C0      		rjmp .L28
 462:../../tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keyboard_nkro) {
 304               		.loc 1 462 0
 305 0010 8091 0000 		lds r24,keyboard_protocol
 306 0014 8823      		tst r24
 307 0016 01F0      		breq .L31
 462:../../tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keyboard_nkro) {
 308               		.loc 1 462 0 is_stmt 0 discriminator 1
 309 0018 8091 0000 		lds r24,keyboard_nkro
 310 001c 8823      		tst r24
 311 001e 01F0      		breq .L31
 312               	.LVL28:
 313               	.LBB112:
 314               	.LBB113:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 315               		.loc 2 270 0 is_stmt 1
 316 0020 82E0      		ldi r24,lo8(2)
 317 0022 8093 E900 		sts 233,r24
 318               	.LVL29:
 319 0026 8FEF      		ldi r24,lo8(-1)
 320               	.LVL30:
 321               	.L32:
 322               	.LBE113:
 323               	.LBE112:
 324               	.LBB114:
 325               	.LBB115:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 326               		.loc 2 360 0
 327 0028 9091 E800 		lds r25,232
 328 002c 8150      		subi r24,lo8(-(-1))
 329               	.LVL31:
 330               	.LBE115:
 331               	.LBE114:
 467:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 332               		.loc 1 467 0
 333 002e 95FD      		sbrc r25,5
 334 0030 00C0      		rjmp .L33
 335               	.LVL32:
 336               	.LBB116:
 337               	.LBB117:
 338               		.loc 3 246 0
 339 0032 95E1      		ldi r25,lo8(21)
 340 0034 9A95      		1: dec r25
 341 0036 01F4      		brne 1b
 342 0038 0000      		nop
 343               	.LVL33:
 344               	.LBE117:
 345               	.LBE116:
 467:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 346               		.loc 1 467 0
 347 003a 8111      		cpse r24,__zero_reg__
 348 003c 00C0      		rjmp .L32
 349               	.LVL34:
 350               	.L33:
 351               	.LBB118:
 352               	.LBB119:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 353               		.loc 2 360 0
 354 003e 8091 E800 		lds r24,232
 355               	.LBE119:
 356               	.LBE118:
 468:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 357               		.loc 1 468 0
 358 0042 85FF      		sbrs r24,5
 359 0044 00C0      		rjmp .L28
 471:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 360               		.loc 1 471 0
 361 0046 40E0      		ldi r20,0
 362 0048 50E0      		ldi r21,0
 363 004a 60E1      		ldi r22,lo8(16)
 364 004c 70E0      		ldi r23,0
 365 004e 00C0      		rjmp .L58
 366               	.LVL35:
 367               	.L31:
 368               	.LBB120:
 369               	.LBB121:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 370               		.loc 2 270 0
 371 0050 81E0      		ldi r24,lo8(1)
 372 0052 8093 E900 		sts 233,r24
 373               	.LVL36:
 374 0056 8FEF      		ldi r24,lo8(-1)
 375               	.LVL37:
 376               	.L37:
 377               	.LBE121:
 378               	.LBE120:
 379               	.LBB122:
 380               	.LBB123:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 381               		.loc 2 360 0
 382 0058 9091 E800 		lds r25,232
 383 005c 8150      		subi r24,lo8(-(-1))
 384               	.LVL38:
 385               	.LBE123:
 386               	.LBE122:
 480:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 387               		.loc 1 480 0
 388 005e 95FD      		sbrc r25,5
 389 0060 00C0      		rjmp .L38
 390               	.LVL39:
 391               	.LBB124:
 392               	.LBB125:
 393               		.loc 3 246 0
 394 0062 95ED      		ldi r25,lo8(-43)
 395 0064 9A95      		1: dec r25
 396 0066 01F4      		brne 1b
 397 0068 0000      		nop
 398               	.LVL40:
 399               	.LBE125:
 400               	.LBE124:
 480:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 401               		.loc 1 480 0
 402 006a 8111      		cpse r24,__zero_reg__
 403 006c 00C0      		rjmp .L37
 404               	.LVL41:
 405               	.L38:
 406               	.LBB126:
 407               	.LBB127:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 408               		.loc 2 360 0
 409 006e 8091 E800 		lds r24,232
 410               	.LBE127:
 411               	.LBE126:
 481:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 412               		.loc 1 481 0
 413 0072 85FF      		sbrs r24,5
 414 0074 00C0      		rjmp .L28
 484:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 415               		.loc 1 484 0
 416 0076 40E0      		ldi r20,0
 417 0078 50E0      		ldi r21,0
 418 007a 68E0      		ldi r22,lo8(8)
 419 007c 70E0      		ldi r23,0
 420               	.LVL42:
 421               	.L58:
 422 007e CE01      		movw r24,r28
 423 0080 0E94 0000 		call Endpoint_Write_Stream_LE
 424               	.LVL43:
 425               	.LBB128:
 426               	.LBB129:
 427               		.loc 2 456 0
 428 0084 8091 E800 		lds r24,232
 429 0088 8E77      		andi r24,lo8(126)
 430 008a 8093 E800 		sts 232,r24
 431               	.LBE129:
 432               	.LBE128:
 490:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 433               		.loc 1 490 0
 434 008e 80E1      		ldi r24,lo8(16)
 435 0090 FE01      		movw r30,r28
 436 0092 A0E0      		ldi r26,lo8(keyboard_report_sent)
 437 0094 B0E0      		ldi r27,hi8(keyboard_report_sent)
 438               		0:
 439 0096 0190      		ld r0,Z+
 440 0098 0D92      		st X+,r0
 441 009a 8A95      		dec r24
 442 009c 01F4      		brne 0b
 443               	.L28:
 444               	/* epilogue start */
 491:../../tmk_core/protocol/lufa/lufa.c **** }
 445               		.loc 1 491 0
 446 009e DF91      		pop r29
 447 00a0 CF91      		pop r28
 448               	.LVL44:
 449 00a2 0895      		ret
 450               		.cfi_endproc
 451               	.LFE112:
 453               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 454               	.global	EVENT_USB_Device_Connect
 456               	EVENT_USB_Device_Connect:
 457               	.LFB104:
 200:../../tmk_core/protocol/lufa/lufa.c **** {
 458               		.loc 1 200 0
 459               		.cfi_startproc
 460               	/* prologue: function */
 461               	/* frame size = 0 */
 462               	/* stack size = 0 */
 463               	.L__stack_usage = 0
 203:../../tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 464               		.loc 1 203 0
 465 0000 8091 0000 		lds r24,USB_IsInitialized
 466 0004 8111      		cpse r24,__zero_reg__
 467 0006 00C0      		rjmp .L59
 204:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 468               		.loc 1 204 0
 469 0008 0E94 0000 		call USB_Disable
 470               	.LVL45:
 205:../../tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 471               		.loc 1 205 0
 472 000c 0E94 0000 		call USB_Init
 473               	.LVL46:
 474               	.LBB130:
 475               	.LBB131:
 476               	.LBB132:
 477               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR
   1:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 478               		.loc 4 113 0
 479 0010 8091 E200 		lds r24,226
 480 0014 8460      		ori r24,lo8(4)
 481 0016 8093 E200 		sts 226,r24
 482               	.LVL47:
 483               	.L59:
 484 001a 0895      		ret
 485               	.LBE132:
 486               	.LBE131:
 487               	.LBE130:
 488               		.cfi_endproc
 489               	.LFE104:
 491               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 492               	.global	EVENT_USB_Device_Disconnect
 494               	EVENT_USB_Device_Disconnect:
 495               	.LFB105:
 211:../../tmk_core/protocol/lufa/lufa.c **** {
 496               		.loc 1 211 0
 497               		.cfi_startproc
 498               	/* prologue: function */
 499               	/* frame size = 0 */
 500               	/* stack size = 0 */
 501               	.L__stack_usage = 0
 214:../../tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 502               		.loc 1 214 0
 503 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 504 0004 0895      		ret
 505               		.cfi_endproc
 506               	.LFE105:
 508               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 509               	.global	EVENT_USB_Device_Reset
 511               	EVENT_USB_Device_Reset:
 512               	.LFB106:
 225:../../tmk_core/protocol/lufa/lufa.c **** {
 513               		.loc 1 225 0
 514               		.cfi_startproc
 515               	/* prologue: function */
 516               	/* frame size = 0 */
 517               	/* stack size = 0 */
 518               	.L__stack_usage = 0
 519 0000 0895      		ret
 520               		.cfi_endproc
 521               	.LFE106:
 523               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 524               	.global	EVENT_USB_Device_Suspend
 526               	EVENT_USB_Device_Suspend:
 527               	.LFB107:
 230:../../tmk_core/protocol/lufa/lufa.c **** {
 528               		.loc 1 230 0
 529               		.cfi_startproc
 530               	/* prologue: function */
 531               	/* frame size = 0 */
 532               	/* stack size = 0 */
 533               	.L__stack_usage = 0
 534 0000 0895      		ret
 535               		.cfi_endproc
 536               	.LFE107:
 538               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 539               	.global	EVENT_USB_Device_WakeUp
 541               	EVENT_USB_Device_WakeUp:
 542               	.LFB108:
 238:../../tmk_core/protocol/lufa/lufa.c **** {
 543               		.loc 1 238 0
 544               		.cfi_startproc
 545               	/* prologue: function */
 546               	/* frame size = 0 */
 547               	/* stack size = 0 */
 548               	.L__stack_usage = 0
 240:../../tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 549               		.loc 1 240 0
 550 0000 0C94 0000 		jmp suspend_wakeup_init
 551               	.LVL48:
 552               		.cfi_endproc
 553               	.LFE108:
 555               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 556               	.global	EVENT_USB_Device_ConfigurationChanged
 558               	EVENT_USB_Device_ConfigurationChanged:
 559               	.LFB109:
 275:../../tmk_core/protocol/lufa/lufa.c **** {
 560               		.loc 1 275 0
 561               		.cfi_startproc
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 566               	.LVL49:
 567               	.LBB133:
 568               	.LBB134:
 210:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 569               		.loc 2 210 0
 570 0000 42E0      		ldi r20,lo8(2)
 571 0002 61EC      		ldi r22,lo8(-63)
 572 0004 81E0      		ldi r24,lo8(1)
 573 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 574               	.LVL50:
 575               	.LBE134:
 576               	.LBE133:
 577               	.LBB135:
 578               	.LBB136:
 579 000a 42E1      		ldi r20,lo8(18)
 580 000c 61EC      		ldi r22,lo8(-63)
 581 000e 82E0      		ldi r24,lo8(2)
 582 0010 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 583               	.LVL51:
 584               	.LBE136:
 585               	.LBE135:
 586               		.cfi_endproc
 587               	.LFE109:
 589               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 590               	.global	EVENT_USB_Device_ControlRequest
 592               	EVENT_USB_Device_ControlRequest:
 593               	.LFB110:
 333:../../tmk_core/protocol/lufa/lufa.c **** {
 594               		.loc 1 333 0
 595               		.cfi_startproc
 596               	/* prologue: function */
 597               	/* frame size = 0 */
 598               	/* stack size = 0 */
 599               	.L__stack_usage = 0
 600               	.LVL52:
 338:../../tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 601               		.loc 1 338 0
 602 0000 8091 0000 		lds r24,USB_ControlRequest+1
 603 0004 8330      		cpi r24,lo8(3)
 604 0006 01F4      		brne .+2
 605 0008 00C0      		rjmp .L68
 606 000a 00F4      		brsh .L69
 607 000c 8130      		cpi r24,lo8(1)
 608 000e 01F0      		breq .L70
 609 0010 8230      		cpi r24,lo8(2)
 610 0012 01F4      		brne .+2
 611 0014 00C0      		rjmp .L71
 612 0016 0895      		ret
 613               	.L69:
 614 0018 8A30      		cpi r24,lo8(10)
 615 001a 01F4      		brne .+2
 616 001c 00C0      		rjmp .L72
 617 001e 8B30      		cpi r24,lo8(11)
 618 0020 01F4      		brne .+2
 619 0022 00C0      		rjmp .L73
 620 0024 8930      		cpi r24,lo8(9)
 621 0026 01F0      		breq .+2
 622 0028 00C0      		rjmp .L66
 623 002a 00C0      		rjmp .L92
 624               	.L70:
 341:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 625               		.loc 1 341 0
 626 002c 8091 0000 		lds r24,USB_ControlRequest
 627 0030 813A      		cpi r24,lo8(-95)
 628 0032 01F0      		breq .+2
 629 0034 00C0      		rjmp .L66
 630               	.LBB137:
 631               	.LBB138:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 632               		.loc 2 444 0
 633 0036 8091 E800 		lds r24,232
 634 003a 877F      		andi r24,lo8(-9)
 635 003c 8093 E800 		sts 232,r24
 636               	.LBE138:
 637               	.LBE137:
 346:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 638               		.loc 1 346 0
 639 0040 8091 0000 		lds r24,USB_ControlRequest+4
 640 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 641 0048 892B      		or r24,r25
 642 004a 01F0      		breq .L86
 335:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 643               		.loc 1 335 0
 644 004c 60E0      		ldi r22,0
 334:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 645               		.loc 1 334 0
 646 004e 80E0      		ldi r24,0
 647 0050 90E0      		ldi r25,0
 648 0052 00C0      		rjmp .L77
 649               	.L86:
 350:../../tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 650               		.loc 1 350 0
 651 0054 60E1      		ldi r22,lo8(16)
 349:../../tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 652               		.loc 1 349 0
 653 0056 80E0      		ldi r24,lo8(keyboard_report_sent)
 654 0058 90E0      		ldi r25,hi8(keyboard_report_sent)
 655               	.L77:
 656               	.LVL53:
 355:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 657               		.loc 1 355 0
 658 005a 70E0      		ldi r23,0
 659 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 660               	.LVL54:
 661               	.LBB139:
 662               	.LBB140:
 457:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 663               		.loc 2 471 0
 664 0060 8091 E800 		lds r24,232
 665 0064 8B77      		andi r24,lo8(123)
 666 0066 8093 E800 		sts 232,r24
 667 006a 0895      		ret
 668               	.LVL55:
 669               	.L92:
 670               	.LBE140:
 671               	.LBE139:
 361:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 672               		.loc 1 361 0
 673 006c 8091 0000 		lds r24,USB_ControlRequest
 674 0070 8132      		cpi r24,lo8(33)
 675 0072 01F0      		breq .+2
 676 0074 00C0      		rjmp .L66
 365:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 677               		.loc 1 365 0
 678 0076 8091 0000 		lds r24,USB_ControlRequest+4
 679 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 680 007e 0297      		sbiw r24,2
 681 0080 00F0      		brlo .+2
 682 0082 00C0      		rjmp .L66
 683               	.LBB141:
 684               	.LBB142:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 685               		.loc 2 444 0
 686 0084 8091 E800 		lds r24,232
 687 0088 877F      		andi r24,lo8(-9)
 688 008a 8093 E800 		sts 232,r24
 689               	.L80:
 690               	.LBE142:
 691               	.LBE141:
 692               	.LBB143:
 693               	.LBB144:
 419:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 694               		.loc 2 419 0 discriminator 1
 695 008e 8091 E800 		lds r24,232
 696               	.LBE144:
 697               	.LBE143:
 372:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 698               		.loc 1 372 0 discriminator 1
 699 0092 82FD      		sbrc r24,2
 700 0094 00C0      		rjmp .L93
 373:../../tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 701               		.loc 1 373 0
 702 0096 8091 0000 		lds r24,USB_DeviceState
 703 009a 8111      		cpse r24,__zero_reg__
 704 009c 00C0      		rjmp .L80
 705 009e 00C0      		rjmp .L66
 706               	.L93:
 707               	.LBB145:
 708               	.LBB146:
 472:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 709               		.loc 2 542 0
 710 00a0 8091 F100 		lds r24,241
 711               	.LBE146:
 712               	.LBE145:
 376:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 713               		.loc 1 376 0
 714 00a4 8093 0000 		sts keyboard_led_stats,r24
 715               	.LBB147:
 716               	.LBB148:
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 717               		.loc 2 471 0
 718 00a8 8091 E800 		lds r24,232
 719 00ac 8B77      		andi r24,lo8(123)
 720 00ae 00C0      		rjmp .L90
 721               	.L68:
 722               	.LBE148:
 723               	.LBE147:
 388:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 724               		.loc 1 388 0
 725 00b0 8091 0000 		lds r24,USB_ControlRequest
 726 00b4 813A      		cpi r24,lo8(-95)
 727 00b6 01F0      		breq .+2
 728 00b8 00C0      		rjmp .L66
 390:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 729               		.loc 1 390 0
 730 00ba 8091 0000 		lds r24,USB_ControlRequest+4
 731 00be 9091 0000 		lds r25,USB_ControlRequest+4+1
 732 00c2 892B      		or r24,r25
 733 00c4 01F0      		breq .+2
 734 00c6 00C0      		rjmp .L66
 735               	.LBB149:
 736               	.LBB150:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 737               		.loc 2 444 0
 738 00c8 8091 E800 		lds r24,232
 739 00cc 877F      		andi r24,lo8(-9)
 740 00ce 8093 E800 		sts 232,r24
 741               	.L83:
 742               	.LBE150:
 743               	.LBE149:
 744               	.LBB151:
 745               	.LBB152:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 746               		.loc 2 407 0 discriminator 1
 747 00d2 8091 E800 		lds r24,232
 748               	.LBE152:
 749               	.LBE151:
 392:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 750               		.loc 1 392 0 discriminator 1
 751 00d6 80FF      		sbrs r24,0
 752 00d8 00C0      		rjmp .L83
 393:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 753               		.loc 1 393 0
 754 00da 8091 0000 		lds r24,keyboard_protocol
 755               	.LVL56:
 756 00de 00C0      		rjmp .L91
 757               	.LVL57:
 758               	.L73:
 401:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 759               		.loc 1 401 0
 760 00e0 8091 0000 		lds r24,USB_ControlRequest
 761 00e4 8132      		cpi r24,lo8(33)
 762 00e6 01F4      		brne .L66
 403:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 763               		.loc 1 403 0
 764 00e8 8091 0000 		lds r24,USB_ControlRequest+4
 765 00ec 9091 0000 		lds r25,USB_ControlRequest+4+1
 766 00f0 892B      		or r24,r25
 767 00f2 01F4      		brne .L66
 768               	.LBB153:
 769               	.LBB154:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 770               		.loc 2 444 0
 771 00f4 8091 E800 		lds r24,232
 772 00f8 877F      		andi r24,lo8(-9)
 773 00fa 8093 E800 		sts 232,r24
 774               	.LBE154:
 775               	.LBE153:
 405:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 776               		.loc 1 405 0
 777 00fe 0E94 0000 		call Endpoint_ClearStatusStage
 778               	.LVL58:
 407:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 779               		.loc 1 407 0
 780 0102 8091 0000 		lds r24,USB_ControlRequest+2
 781 0106 8093 0000 		sts keyboard_protocol,r24
 408:../../tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 782               		.loc 1 408 0
 783 010a 0C94 0000 		jmp clear_keyboard
 784               	.LVL59:
 785               	.L72:
 414:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 786               		.loc 1 414 0
 787 010e 8091 0000 		lds r24,USB_ControlRequest
 788 0112 8132      		cpi r24,lo8(33)
 789 0114 01F4      		brne .L66
 790               	.LBB155:
 791               	.LBB156:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 792               		.loc 2 444 0
 793 0116 8091 E800 		lds r24,232
 794 011a 877F      		andi r24,lo8(-9)
 795 011c 8093 E800 		sts 232,r24
 796               	.LBE156:
 797               	.LBE155:
 417:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 798               		.loc 1 417 0
 799 0120 0E94 0000 		call Endpoint_ClearStatusStage
 800               	.LVL60:
 419:../../tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 801               		.loc 1 419 0
 802 0124 8091 0000 		lds r24,USB_ControlRequest+3
 803 0128 8093 0000 		sts keyboard_idle,r24
 804 012c 0895      		ret
 805               	.L71:
 424:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 806               		.loc 1 424 0
 807 012e 8091 0000 		lds r24,USB_ControlRequest
 808 0132 813A      		cpi r24,lo8(-95)
 809 0134 01F4      		brne .L66
 810               	.LBB157:
 811               	.LBB158:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 812               		.loc 2 444 0
 813 0136 8091 E800 		lds r24,232
 814 013a 877F      		andi r24,lo8(-9)
 815 013c 8093 E800 		sts 232,r24
 816               	.L85:
 817               	.LBE158:
 818               	.LBE157:
 819               	.LBB159:
 820               	.LBB160:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 821               		.loc 2 407 0 discriminator 1
 822 0140 8091 E800 		lds r24,232
 823               	.LBE160:
 824               	.LBE159:
 427:../../tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 825               		.loc 1 427 0 discriminator 1
 826 0144 80FF      		sbrs r24,0
 827 0146 00C0      		rjmp .L85
 428:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 828               		.loc 1 428 0
 829 0148 8091 0000 		lds r24,keyboard_idle
 830               	.L91:
 831               	.LVL61:
 832               	.LBB161:
 833               	.LBB162:
 543:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 834               		.loc 2 554 0
 835 014c 8093 F100 		sts 241,r24
 836               	.LBE162:
 837               	.LBE161:
 838               	.LBB163:
 839               	.LBB164:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 840               		.loc 2 456 0
 841 0150 8091 E800 		lds r24,232
 842               	.LVL62:
 843 0154 8E77      		andi r24,lo8(126)
 844               	.LVL63:
 845               	.L90:
 846 0156 8093 E800 		sts 232,r24
 847               	.LBE164:
 848               	.LBE163:
 430:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 849               		.loc 1 430 0
 850 015a 0C94 0000 		jmp Endpoint_ClearStatusStage
 851               	.LVL64:
 852               	.L66:
 853 015e 0895      		ret
 854               		.cfi_endproc
 855               	.LFE110:
 857               		.section	.text.sendchar,"ax",@progbits
 858               	.global	sendchar
 860               	sendchar:
 861               	.LFB116:
 587:../../tmk_core/protocol/lufa/lufa.c **** 
 588:../../tmk_core/protocol/lufa/lufa.c **** 
 589:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 590:../../tmk_core/protocol/lufa/lufa.c ****  * sendchar
 591:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 592:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 593:../../tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 594:../../tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 595:../../tmk_core/protocol/lufa/lufa.c **** {
 596:../../tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 597:../../tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 598:../../tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 599:../../tmk_core/protocol/lufa/lufa.c **** 
 600:../../tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 601:../../tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 602:../../tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 603:../../tmk_core/protocol/lufa/lufa.c **** 
 604:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 605:../../tmk_core/protocol/lufa/lufa.c ****         return -1;
 606:../../tmk_core/protocol/lufa/lufa.c **** 
 607:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 608:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 609:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 610:../../tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 611:../../tmk_core/protocol/lufa/lufa.c ****     }
 612:../../tmk_core/protocol/lufa/lufa.c **** 
 613:../../tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 614:../../tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 615:../../tmk_core/protocol/lufa/lufa.c ****     }
 616:../../tmk_core/protocol/lufa/lufa.c **** 
 617:../../tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 618:../../tmk_core/protocol/lufa/lufa.c **** 
 619:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 620:../../tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 621:../../tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 622:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 623:../../tmk_core/protocol/lufa/lufa.c ****         }
 624:../../tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 625:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 626:../../tmk_core/protocol/lufa/lufa.c ****         }
 627:../../tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 628:../../tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 629:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 630:../../tmk_core/protocol/lufa/lufa.c ****         }
 631:../../tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 632:../../tmk_core/protocol/lufa/lufa.c ****     }
 633:../../tmk_core/protocol/lufa/lufa.c **** 
 634:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 635:../../tmk_core/protocol/lufa/lufa.c **** 
 636:../../tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 637:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 638:../../tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 639:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 640:../../tmk_core/protocol/lufa/lufa.c ****     } else {
 641:../../tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 642:../../tmk_core/protocol/lufa/lufa.c ****     }
 643:../../tmk_core/protocol/lufa/lufa.c **** 
 644:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 645:../../tmk_core/protocol/lufa/lufa.c ****     return 0;
 646:../../tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 647:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 648:../../tmk_core/protocol/lufa/lufa.c ****     return -1;
 649:../../tmk_core/protocol/lufa/lufa.c **** }
 650:../../tmk_core/protocol/lufa/lufa.c **** #else
 651:../../tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 652:../../tmk_core/protocol/lufa/lufa.c **** {
 862               		.loc 1 652 0
 863               		.cfi_startproc
 864               	.LVL65:
 865               	/* prologue: function */
 866               	/* frame size = 0 */
 867               	/* stack size = 0 */
 868               	.L__stack_usage = 0
 653:../../tmk_core/protocol/lufa/lufa.c ****     return 0;
 654:../../tmk_core/protocol/lufa/lufa.c **** }
 869               		.loc 1 654 0
 870 0000 80E0      		ldi r24,0
 871               	.LVL66:
 872 0002 0895      		ret
 873               		.cfi_endproc
 874               	.LFE116:
 876               		.section	.text.startup.main,"ax",@progbits
 877               		.weak	main
 879               	main:
 880               	.LFB119:
 655:../../tmk_core/protocol/lufa/lufa.c **** #endif
 656:../../tmk_core/protocol/lufa/lufa.c **** 
 657:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 658:../../tmk_core/protocol/lufa/lufa.c ****  * MIDI
 659:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 660:../../tmk_core/protocol/lufa/lufa.c **** 
 661:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 662:../../tmk_core/protocol/lufa/lufa.c **** void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) 
 663:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 664:../../tmk_core/protocol/lufa/lufa.c ****   event.Data1 = byte0;
 665:../../tmk_core/protocol/lufa/lufa.c ****   event.Data2 = byte1;
 666:../../tmk_core/protocol/lufa/lufa.c ****   event.Data3 = byte2;
 667:../../tmk_core/protocol/lufa/lufa.c **** 
 668:../../tmk_core/protocol/lufa/lufa.c ****   uint8_t cable = 0;
 669:../../tmk_core/protocol/lufa/lufa.c **** 
 670:../../tmk_core/protocol/lufa/lufa.c **** // Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);
 671:../../tmk_core/protocol/lufa/lufa.c **** 
 672:../../tmk_core/protocol/lufa/lufa.c ****   //if the length is undefined we assume it is a SYSEX message
 673:../../tmk_core/protocol/lufa/lufa.c ****   if (midi_packet_length(byte0) == UNDEFINED) {
 674:../../tmk_core/protocol/lufa/lufa.c ****     switch(cnt) {
 675:../../tmk_core/protocol/lufa/lufa.c ****       case 3:
 676:../../tmk_core/protocol/lufa/lufa.c ****         if (byte2 == SYSEX_END)
 677:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_3);
 678:../../tmk_core/protocol/lufa/lufa.c ****         else
 679:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 680:../../tmk_core/protocol/lufa/lufa.c ****         break;
 681:../../tmk_core/protocol/lufa/lufa.c ****       case 2:
 682:../../tmk_core/protocol/lufa/lufa.c ****         if (byte1 == SYSEX_END)
 683:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_2);
 684:../../tmk_core/protocol/lufa/lufa.c ****         else
 685:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 686:../../tmk_core/protocol/lufa/lufa.c ****         break;
 687:../../tmk_core/protocol/lufa/lufa.c ****       case 1:
 688:../../tmk_core/protocol/lufa/lufa.c ****         if (byte0 == SYSEX_END)
 689:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_1);
 690:../../tmk_core/protocol/lufa/lufa.c ****         else
 691:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 692:../../tmk_core/protocol/lufa/lufa.c ****         break;
 693:../../tmk_core/protocol/lufa/lufa.c ****       default:
 694:../../tmk_core/protocol/lufa/lufa.c ****         return; //invalid cnt
 695:../../tmk_core/protocol/lufa/lufa.c ****     }
 696:../../tmk_core/protocol/lufa/lufa.c ****   } else {
 697:../../tmk_core/protocol/lufa/lufa.c ****     //deal with 'system common' messages
 698:../../tmk_core/protocol/lufa/lufa.c ****     //TODO are there any more?
 699:../../tmk_core/protocol/lufa/lufa.c ****     switch(byte0 & 0xF0){
 700:../../tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGPOSITION:
 701:../../tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_3);
 702:../../tmk_core/protocol/lufa/lufa.c ****         break;
 703:../../tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGSELECT:
 704:../../tmk_core/protocol/lufa/lufa.c ****       case MIDI_TC_QUARTERFRAME:
 705:../../tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_2);
 706:../../tmk_core/protocol/lufa/lufa.c ****         break;
 707:../../tmk_core/protocol/lufa/lufa.c ****       default:
 708:../../tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, byte0);
 709:../../tmk_core/protocol/lufa/lufa.c ****         break;
 710:../../tmk_core/protocol/lufa/lufa.c ****     }
 711:../../tmk_core/protocol/lufa/lufa.c ****   }
 712:../../tmk_core/protocol/lufa/lufa.c **** 
 713:../../tmk_core/protocol/lufa/lufa.c **** // Endpoint_Write_Stream_LE(&event, sizeof(event), NULL);
 714:../../tmk_core/protocol/lufa/lufa.c **** // Endpoint_ClearIN();
 715:../../tmk_core/protocol/lufa/lufa.c **** 
 716:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &event);
 717:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_Flush(&USB_MIDI_Interface);
 718:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 719:../../tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 720:../../tmk_core/protocol/lufa/lufa.c **** }
 721:../../tmk_core/protocol/lufa/lufa.c **** 
 722:../../tmk_core/protocol/lufa/lufa.c **** void usb_get_midi(MidiDevice * device) {
 723:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 724:../../tmk_core/protocol/lufa/lufa.c ****   while (MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, &event)) {
 725:../../tmk_core/protocol/lufa/lufa.c **** 
 726:../../tmk_core/protocol/lufa/lufa.c ****     midi_packet_length_t length = midi_packet_length(event.Data1);
 727:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t input[3];
 728:../../tmk_core/protocol/lufa/lufa.c ****     input[0] = event.Data1;
 729:../../tmk_core/protocol/lufa/lufa.c ****     input[1] = event.Data2;
 730:../../tmk_core/protocol/lufa/lufa.c ****     input[2] = event.Data3;
 731:../../tmk_core/protocol/lufa/lufa.c ****     if (length == UNDEFINED) {
 732:../../tmk_core/protocol/lufa/lufa.c ****       //sysex
 733:../../tmk_core/protocol/lufa/lufa.c ****       if (event.Event == MIDI_EVENT(0, SYSEX_START_OR_CONT) || event.Event == MIDI_EVENT(0, SYSEX_E
 734:../../tmk_core/protocol/lufa/lufa.c ****         length = 3;
 735:../../tmk_core/protocol/lufa/lufa.c ****       } else if (event.Event == MIDI_EVENT(0, SYSEX_ENDS_IN_2)) {
 736:../../tmk_core/protocol/lufa/lufa.c ****         length = 2;
 737:../../tmk_core/protocol/lufa/lufa.c ****       } else if(event.Event ==  MIDI_EVENT(0, SYSEX_ENDS_IN_1)) {
 738:../../tmk_core/protocol/lufa/lufa.c ****         length = 1;
 739:../../tmk_core/protocol/lufa/lufa.c ****       } else {
 740:../../tmk_core/protocol/lufa/lufa.c ****         //XXX what to do?
 741:../../tmk_core/protocol/lufa/lufa.c ****       }
 742:../../tmk_core/protocol/lufa/lufa.c ****     }
 743:../../tmk_core/protocol/lufa/lufa.c **** 
 744:../../tmk_core/protocol/lufa/lufa.c ****     //pass the data to the device input function
 745:../../tmk_core/protocol/lufa/lufa.c ****     if (length != UNDEFINED)
 746:../../tmk_core/protocol/lufa/lufa.c ****       midi_device_input(device, length, input);
 747:../../tmk_core/protocol/lufa/lufa.c ****   }
 748:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 749:../../tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 750:../../tmk_core/protocol/lufa/lufa.c **** }
 751:../../tmk_core/protocol/lufa/lufa.c **** 
 752:../../tmk_core/protocol/lufa/lufa.c **** void midi_usb_init(MidiDevice * device){
 753:../../tmk_core/protocol/lufa/lufa.c ****   midi_device_init(device);
 754:../../tmk_core/protocol/lufa/lufa.c ****   midi_device_set_send_func(device, usb_send_func);
 755:../../tmk_core/protocol/lufa/lufa.c ****   midi_device_set_pre_input_process_func(device, usb_get_midi);
 756:../../tmk_core/protocol/lufa/lufa.c **** 
 757:../../tmk_core/protocol/lufa/lufa.c ****   SetupHardware();
 758:../../tmk_core/protocol/lufa/lufa.c ****   sei();
 759:../../tmk_core/protocol/lufa/lufa.c **** }
 760:../../tmk_core/protocol/lufa/lufa.c **** 
 761:../../tmk_core/protocol/lufa/lufa.c **** void MIDI_Task(void)
 762:../../tmk_core/protocol/lufa/lufa.c **** {
 763:../../tmk_core/protocol/lufa/lufa.c **** 
 764:../../tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 765:../../tmk_core/protocol/lufa/lufa.c ****     dprint("in MIDI_TASK\n");
 766:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 767:../../tmk_core/protocol/lufa/lufa.c ****       return;
 768:../../tmk_core/protocol/lufa/lufa.c ****     dprint("continuing in MIDI_TASK\n");
 769:../../tmk_core/protocol/lufa/lufa.c **** 
 770:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
 771:../../tmk_core/protocol/lufa/lufa.c **** 
 772:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady())
 773:../../tmk_core/protocol/lufa/lufa.c ****     {
 774:../../tmk_core/protocol/lufa/lufa.c **** 
 775:../../tmk_core/protocol/lufa/lufa.c ****         dprint("Endpoint is ready\n");
 776:../../tmk_core/protocol/lufa/lufa.c **** 
 777:../../tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDICommand = 0;
 778:../../tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDIPitch;
 779:../../tmk_core/protocol/lufa/lufa.c **** 
 780:../../tmk_core/protocol/lufa/lufa.c ****         /* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 
 781:../../tmk_core/protocol/lufa/lufa.c ****         uint8_t Channel = MIDI_CHANNEL(1);
 782:../../tmk_core/protocol/lufa/lufa.c **** 
 783:../../tmk_core/protocol/lufa/lufa.c ****         MIDICommand = MIDI_COMMAND_NOTE_ON;
 784:../../tmk_core/protocol/lufa/lufa.c ****         MIDIPitch   = 0x3E;
 785:../../tmk_core/protocol/lufa/lufa.c **** 
 786:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if a MIDI command is to be sent */
 787:../../tmk_core/protocol/lufa/lufa.c ****         if (MIDICommand)
 788:../../tmk_core/protocol/lufa/lufa.c ****         {
 789:../../tmk_core/protocol/lufa/lufa.c ****             dprint("Command exists\n");
 790:../../tmk_core/protocol/lufa/lufa.c ****             MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 791:../../tmk_core/protocol/lufa/lufa.c ****                 {
 792:../../tmk_core/protocol/lufa/lufa.c ****                     .Event       = MIDI_EVENT(0, MIDICommand),
 793:../../tmk_core/protocol/lufa/lufa.c **** 
 794:../../tmk_core/protocol/lufa/lufa.c ****                     .Data1       = MIDICommand | Channel,
 795:../../tmk_core/protocol/lufa/lufa.c ****                     .Data2       = MIDIPitch,
 796:../../tmk_core/protocol/lufa/lufa.c ****                     .Data3       = MIDI_STANDARD_VELOCITY,
 797:../../tmk_core/protocol/lufa/lufa.c ****                 };
 798:../../tmk_core/protocol/lufa/lufa.c **** 
 799:../../tmk_core/protocol/lufa/lufa.c ****             /* Write the MIDI event packet to the endpoint */
 800:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 801:../../tmk_core/protocol/lufa/lufa.c **** 
 802:../../tmk_core/protocol/lufa/lufa.c ****             /* Send the data in the endpoint to the host */
 803:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
 804:../../tmk_core/protocol/lufa/lufa.c ****         }
 805:../../tmk_core/protocol/lufa/lufa.c ****     }
 806:../../tmk_core/protocol/lufa/lufa.c **** 
 807:../../tmk_core/protocol/lufa/lufa.c **** 
 808:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the MIDI OUT stream */
 809:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);
 810:../../tmk_core/protocol/lufa/lufa.c **** 
 811:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if a MIDI command has been received */
 812:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 813:../../tmk_core/protocol/lufa/lufa.c ****     {
 814:../../tmk_core/protocol/lufa/lufa.c ****         MIDI_EventPacket_t MIDIEvent;
 815:../../tmk_core/protocol/lufa/lufa.c **** 
 816:../../tmk_core/protocol/lufa/lufa.c ****         /* Read the MIDI event packet from the endpoint */
 817:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 818:../../tmk_core/protocol/lufa/lufa.c **** 
 819:../../tmk_core/protocol/lufa/lufa.c ****         /* If the endpoint is now empty, clear the bank */
 820:../../tmk_core/protocol/lufa/lufa.c ****         if (!(Endpoint_BytesInEndpoint()))
 821:../../tmk_core/protocol/lufa/lufa.c ****         {
 822:../../tmk_core/protocol/lufa/lufa.c ****             /* Clear the endpoint ready for new packet */
 823:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearOUT();
 824:../../tmk_core/protocol/lufa/lufa.c ****         }
 825:../../tmk_core/protocol/lufa/lufa.c ****     }
 826:../../tmk_core/protocol/lufa/lufa.c **** }
 827:../../tmk_core/protocol/lufa/lufa.c **** 
 828:../../tmk_core/protocol/lufa/lufa.c **** #endif
 829:../../tmk_core/protocol/lufa/lufa.c **** 
 830:../../tmk_core/protocol/lufa/lufa.c **** 
 831:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 832:../../tmk_core/protocol/lufa/lufa.c ****  * main
 833:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 834:../../tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 835:../../tmk_core/protocol/lufa/lufa.c **** {
 836:../../tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 837:../../tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 838:../../tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 839:../../tmk_core/protocol/lufa/lufa.c **** 
 840:../../tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 841:../../tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 842:../../tmk_core/protocol/lufa/lufa.c **** 
 843:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 844:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 845:../../tmk_core/protocol/lufa/lufa.c **** }
 846:../../tmk_core/protocol/lufa/lufa.c **** 
 847:../../tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
 848:../../tmk_core/protocol/lufa/lufa.c **** {
 849:../../tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 850:../../tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 851:../../tmk_core/protocol/lufa/lufa.c **** 
 852:../../tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 853:../../tmk_core/protocol/lufa/lufa.c **** 
 854:../../tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 855:../../tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 856:../../tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 857:../../tmk_core/protocol/lufa/lufa.c **** }
 858:../../tmk_core/protocol/lufa/lufa.c **** 
 859:../../tmk_core/protocol/lufa/lufa.c **** 
 860:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 861:../../tmk_core/protocol/lufa/lufa.c **** void fallthrough_callback(MidiDevice * device,
 862:../../tmk_core/protocol/lufa/lufa.c ****     uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
 863:../../tmk_core/protocol/lufa/lufa.c **** void cc_callback(MidiDevice * device,
 864:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t chan, uint8_t num, uint8_t val);
 865:../../tmk_core/protocol/lufa/lufa.c **** void sysex_callback(MidiDevice * device,
 866:../../tmk_core/protocol/lufa/lufa.c ****     uint16_t start, uint8_t length, uint8_t * data);
 867:../../tmk_core/protocol/lufa/lufa.c **** #endif
 868:../../tmk_core/protocol/lufa/lufa.c **** 
 869:../../tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 870:../../tmk_core/protocol/lufa/lufa.c **** int main(void)
 871:../../tmk_core/protocol/lufa/lufa.c **** {
 881               		.loc 1 871 0
 882               		.cfi_startproc
 883               	/* prologue: function */
 884               	/* frame size = 0 */
 885               	/* stack size = 0 */
 886               	.L__stack_usage = 0
 887               	.LBB172:
 888               	.LBB173:
 837:../../tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 889               		.loc 1 837 0
 890 0000 84B7      		in r24,0x34
 891 0002 877F      		andi r24,lo8(-9)
 892 0004 84BF      		out 0x34,r24
 838:../../tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 893               		.loc 1 838 0
 894 0006 88E1      		ldi r24,lo8(24)
 895               	/* #APP */
 896               	 ;  838 "../../tmk_core/protocol/lufa/lufa.c" 1
 897 0008 0FB6      		in __tmp_reg__, __SREG__
 898 000a F894      		cli
 899 000c 8093 6000 		sts 96, r24
 900 0010 1092 6000 		sts 96, __zero_reg__
 901 0014 0FBE      		out __SREG__,__tmp_reg__
 902               		
 903               	 ;  0 "" 2
 843:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 904               		.loc 1 843 0
 905               	/* #NOAPP */
 906 0016 80E8      		ldi r24,lo8(-128)
 907 0018 8093 6100 		sts 97,r24
 844:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 908               		.loc 1 844 0
 909 001c 1092 6100 		sts 97,__zero_reg__
 910               	.LBE173:
 911               	.LBE172:
 872:../../tmk_core/protocol/lufa/lufa.c **** 
 873:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 874:../../tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
 875:../../tmk_core/protocol/lufa/lufa.c ****     midi_device_set_send_func(&midi_device, usb_send_func);
 876:../../tmk_core/protocol/lufa/lufa.c ****     midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
 877:../../tmk_core/protocol/lufa/lufa.c **** #endif
 878:../../tmk_core/protocol/lufa/lufa.c **** 
 879:../../tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 880:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 912               		.loc 1 880 0
 913 0020 0E94 0000 		call keyboard_setup
 914               	.LVL67:
 915               	.LBB174:
 916               	.LBB175:
 850:../../tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 917               		.loc 1 850 0
 918 0024 0E94 0000 		call USB_Disable
 919               	.LVL68:
 852:../../tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 920               		.loc 1 852 0
 921 0028 0E94 0000 		call USB_Init
 922               	.LVL69:
 923               	.LBB176:
 924               	.LBB177:
 925               	.LBB178:
 926               		.loc 4 113 0
 927 002c 8091 E200 		lds r24,226
 928 0030 8460      		ori r24,lo8(4)
 929 0032 8093 E200 		sts 226,r24
 930               	.LBE178:
 931               	.LBE177:
 932               	.LBE176:
 933               	.LBE175:
 934               	.LBE174:
 881:../../tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 882:../../tmk_core/protocol/lufa/lufa.c ****     sei();
 935               		.loc 1 882 0
 936               	/* #APP */
 937               	 ;  882 "../../tmk_core/protocol/lufa/lufa.c" 1
 938 0036 7894      		sei
 939               	 ;  0 "" 2
 883:../../tmk_core/protocol/lufa/lufa.c **** 
 884:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 885:../../tmk_core/protocol/lufa/lufa.c ****     midi_register_fallthrough_callback(&midi_device, fallthrough_callback);
 886:../../tmk_core/protocol/lufa/lufa.c ****     midi_register_cc_callback(&midi_device, cc_callback);
 887:../../tmk_core/protocol/lufa/lufa.c ****     midi_register_sysex_callback(&midi_device, sysex_callback);
 888:../../tmk_core/protocol/lufa/lufa.c **** 
 889:../../tmk_core/protocol/lufa/lufa.c ****     // init_notes();
 890:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 0, 1, 2);
 891:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 15, 1, 0);
 892:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteon(&midi_device, 0, 64, 127);
 893:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteoff(&midi_device, 0, 64, 127);
 894:../../tmk_core/protocol/lufa/lufa.c **** #endif
 895:../../tmk_core/protocol/lufa/lufa.c **** 
 896:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 897:../../tmk_core/protocol/lufa/lufa.c ****     serial_init();
 898:../../tmk_core/protocol/lufa/lufa.c **** #endif
 899:../../tmk_core/protocol/lufa/lufa.c **** 
 900:../../tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 901:../../tmk_core/protocol/lufa/lufa.c **** 
 902:../../tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
 903:../../tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 904:../../tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
 905:../../tmk_core/protocol/lufa/lufa.c ****             ;
 906:../../tmk_core/protocol/lufa/lufa.c ****     #else
 907:../../tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
 908:../../tmk_core/protocol/lufa/lufa.c ****     #endif
 909:../../tmk_core/protocol/lufa/lufa.c ****     }
 910:../../tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 911:../../tmk_core/protocol/lufa/lufa.c **** #else
 912:../../tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 940               		.loc 1 912 0
 941               	/* #NOAPP */
 942 0038 0E94 0000 		call USB_USBTask
 943               	.LVL70:
 913:../../tmk_core/protocol/lufa/lufa.c **** #endif
 914:../../tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 915:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 944               		.loc 1 915 0
 945 003c 0E94 0000 		call keyboard_init
 946               	.LVL71:
 916:../../tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 947               		.loc 1 916 0
 948 0040 80E0      		ldi r24,lo8(lufa_driver)
 949 0042 90E0      		ldi r25,hi8(lufa_driver)
 950 0044 0E94 0000 		call host_set_driver
 951               	.LVL72:
 952               	.L96:
 917:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 918:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 919:../../tmk_core/protocol/lufa/lufa.c **** #endif
 920:../../tmk_core/protocol/lufa/lufa.c **** 
 921:../../tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 922:../../tmk_core/protocol/lufa/lufa.c ****     while (1) {
 923:../../tmk_core/protocol/lufa/lufa.c ****         #ifndef BLUETOOTH_ENABLE
 924:../../tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 953               		.loc 1 924 0 discriminator 1
 954 0048 8091 0000 		lds r24,USB_DeviceState
 955 004c 8530      		cpi r24,lo8(5)
 956 004e 01F4      		brne .L104
 925:../../tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 926:../../tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 957               		.loc 1 926 0
 958 0050 0E94 0000 		call suspend_power_down
 959               	.LVL73:
 927:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 960               		.loc 1 927 0
 961 0054 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 962 0058 8823      		tst r24
 963 005a 01F0      		breq .L96
 964               		.loc 1 927 0 is_stmt 0 discriminator 1
 965 005c 0E94 0000 		call suspend_wakeup_condition
 966               	.LVL74:
 967 0060 8823      		tst r24
 968 0062 01F0      		breq .L96
 928:../../tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 969               		.loc 1 928 0 is_stmt 1
 970 0064 0E94 0000 		call USB_Device_SendRemoteWakeup
 971               	.LVL75:
 972 0068 00C0      		rjmp .L96
 973               	.L104:
 929:../../tmk_core/protocol/lufa/lufa.c ****             }
 930:../../tmk_core/protocol/lufa/lufa.c ****         }
 931:../../tmk_core/protocol/lufa/lufa.c ****         #endif
 932:../../tmk_core/protocol/lufa/lufa.c **** 
 933:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 934:../../tmk_core/protocol/lufa/lufa.c ****         midi_device_process(&midi_device);
 935:../../tmk_core/protocol/lufa/lufa.c ****         // MIDI_Task();
 936:../../tmk_core/protocol/lufa/lufa.c **** #endif
 937:../../tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 974               		.loc 1 937 0
 975 006a 0E94 0000 		call keyboard_task
 976               	.LVL76:
 938:../../tmk_core/protocol/lufa/lufa.c **** 
 939:../../tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
 940:../../tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
 941:../../tmk_core/protocol/lufa/lufa.c **** #endif
 942:../../tmk_core/protocol/lufa/lufa.c ****     }
 977               		.loc 1 942 0
 978 006e 00C0      		rjmp .L96
 979               		.cfi_endproc
 980               	.LFE119:
 982               	.global	lufa_driver
 983               		.section	.data.lufa_driver,"aw",@progbits
 986               	lufa_driver:
 987 0000 0000      		.word	gs(keyboard_leds)
 988 0002 0000      		.word	gs(send_keyboard)
 989 0004 0000      		.word	gs(send_mouse)
 990 0006 0000      		.word	gs(send_system)
 991 0008 0000      		.word	gs(send_consumer)
 992               		.section	.bss.keyboard_report_sent,"aw",@nobits
 995               	keyboard_report_sent:
 996 0000 0000 0000 		.zero	16
 996      0000 0000 
 996      0000 0000 
 996      0000 0000 
 997               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1000               	keyboard_led_stats:
 1001 0000 00        		.zero	1
 1002               	.global	keyboard_protocol
 1003               		.section	.data.keyboard_protocol,"aw",@progbits
 1006               	keyboard_protocol:
 1007 0000 01        		.byte	1
 1008               	.global	keyboard_idle
 1009               		.section	.bss.keyboard_idle,"aw",@nobits
 1012               	keyboard_idle:
 1013 0000 00        		.zero	1
 1014               		.text
 1015               	.Letext0:
 1016               		.file 5 "/usr/lib/avr/include/stdint.h"
 1017               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1018               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1019               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCom
 1020               		.file 9 "../../tmk_core/common/report.h"
 1021               		.file 10 "../../tmk_core/common/host_driver.h"
 1022               		.file 11 "../../tmk_core/protocol/lufa/lufa.h"
 1023               		.file 12 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1024               		.file 13 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1025               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1026               		.file 15 "../../tmk_core/common/host.h"
 1027               		.file 16 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1028               		.file 17 "../../tmk_core/common/suspend.h"
 1029               		.file 18 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_
 1030               		.file 19 "../../tmk_core/common/action.h"
 1031               		.file 20 "../../tmk_core/common/keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccvQ17ul.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvQ17ul.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvQ17ul.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvQ17ul.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvQ17ul.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvQ17ul.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccvQ17ul.s:1000   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccvQ17ul.s:29     .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccvQ17ul.s:44     .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccvQ17ul.s:163    .text.send_system:0000000000000000 send_system
     /tmp/ccvQ17ul.s:279    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccvQ17ul.s:1006   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccvQ17ul.s:995    .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccvQ17ul.s:456    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccvQ17ul.s:494    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccvQ17ul.s:511    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccvQ17ul.s:526    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccvQ17ul.s:541    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccvQ17ul.s:558    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccvQ17ul.s:592    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccvQ17ul.s:1012   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccvQ17ul.s:860    .text.sendchar:0000000000000000 sendchar
     /tmp/ccvQ17ul.s:879    .text.startup.main:0000000000000000 main
     /tmp/ccvQ17ul.s:986    .data.lufa_driver:0000000000000000 lufa_driver

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keyboard_nkro
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
__do_copy_data
__do_clear_bss
